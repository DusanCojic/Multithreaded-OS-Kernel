GAS LISTING /tmp/ccXmE4MK.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB67:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** #include "../h/riscv.hpp"
   2:src/riscv.cpp **** #include "../h/syscall_c.hpp"
   3:src/riscv.cpp **** #include "../h/memory_allocator.hpp"
   4:src/riscv.cpp **** #include "../h/tcb.hpp"
   5:src/riscv.cpp **** #include "../test/printing.hpp"
   6:src/riscv.cpp **** #include "../h/semaphore.hpp"
   7:src/riscv.cpp **** #include "../lib/console.h"
   8:src/riscv.cpp **** #include "../h/wait_list.hpp"
   9:src/riscv.cpp **** #include "../h/console.hpp"
  10:src/riscv.cpp **** #include "../lib/mem.h"
  11:src/riscv.cpp **** 
  12:src/riscv.cpp **** bool Riscv::user = false;
  13:src/riscv.cpp **** 
  14:src/riscv.cpp **** void Riscv::popSppSpie()
  15:src/riscv.cpp **** {
  12              		.loc 1 15 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  16:src/riscv.cpp ****     if (user) {
  20              		.loc 1 16 5
  21 000c 97070000 		lbu	a5,.LANCHOR0
  21      83C70700 
  22 0014 63800702 		beqz	a5,.L2
  17:src/riscv.cpp ****         mc_sstatus(Riscv::SSTATUS_SPP);
  23              		.loc 1 17 9
  24              	.LVL0:
  25              	.LBB76:
  26              	.LBB77:
  27              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** #ifndef RISCV_HPP
   2:src/../h/riscv.hpp **** #define RISCV_HPP
   3:src/../h/riscv.hpp **** 
   4:src/../h/riscv.hpp **** #include "../lib/hw.h"
   5:src/../h/riscv.hpp **** 
   6:src/../h/riscv.hpp **** class Riscv
   7:src/../h/riscv.hpp **** {
   8:src/../h/riscv.hpp **** public:
   9:src/../h/riscv.hpp **** 
  10:src/../h/riscv.hpp ****     static bool user;
  11:src/../h/riscv.hpp **** 
  12:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non-inline function)
  13:src/../h/riscv.hpp ****     static void popSppSpie();
GAS LISTING /tmp/ccXmE4MK.s 			page 2


  14:src/../h/riscv.hpp **** 
  15:src/../h/riscv.hpp ****     // scause values to check for
  16:src/../h/riscv.hpp ****     enum SCAUSE : uint64 {
  17:src/../h/riscv.hpp ****         SOFTWARE = 0x8000000000000001,
  18:src/../h/riscv.hpp ****         HARDWARE = 0x8000000000000009,
  19:src/../h/riscv.hpp ****         ILLEGAL_INSTRUCTION = 0x0000000000000002,
  20:src/../h/riscv.hpp ****         ILLEGAL_READ_ADDRESS = 0x0000000000000005,
  21:src/../h/riscv.hpp ****         ILLEGAL_WRITE_ADDRESS = 0x0000000000000007,
  22:src/../h/riscv.hpp ****         SYSCALL_USER = 0x0000000000000008,
  23:src/../h/riscv.hpp ****         SYSCALL_SYSTEM = 0x0000000000000009
  24:src/../h/riscv.hpp ****     };
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     // read register scause
  27:src/../h/riscv.hpp ****     static uint64 r_scause();
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // write register scause
  30:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     // read register sepc
  33:src/../h/riscv.hpp ****     static uint64 r_sepc();
  34:src/../h/riscv.hpp **** 
  35:src/../h/riscv.hpp ****     // write register sepc
  36:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     // read register stvec
  39:src/../h/riscv.hpp ****     static uint64 r_stvec();
  40:src/../h/riscv.hpp **** 
  41:src/../h/riscv.hpp ****     // write register stvec
  42:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  43:src/../h/riscv.hpp **** 
  44:src/../h/riscv.hpp ****     // read register stval
  45:src/../h/riscv.hpp ****     static uint64 r_stval();
  46:src/../h/riscv.hpp **** 
  47:src/../h/riscv.hpp ****     // write register stval
  48:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  49:src/../h/riscv.hpp **** 
  50:src/../h/riscv.hpp ****     enum BitMaskSip
  51:src/../h/riscv.hpp ****     {
  52:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  53:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  54:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  55:src/../h/riscv.hpp ****     };
  56:src/../h/riscv.hpp **** 
  57:src/../h/riscv.hpp ****     // mask set register sip
  58:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  59:src/../h/riscv.hpp **** 
  60:src/../h/riscv.hpp ****     // mask clear register sip
  61:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  62:src/../h/riscv.hpp **** 
  63:src/../h/riscv.hpp ****     // read register sip
  64:src/../h/riscv.hpp ****     static uint64 r_sip();
  65:src/../h/riscv.hpp **** 
  66:src/../h/riscv.hpp ****     // write register sip
  67:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  68:src/../h/riscv.hpp **** 
  69:src/../h/riscv.hpp ****     enum BitMaskSstatus
  70:src/../h/riscv.hpp ****     {
GAS LISTING /tmp/ccXmE4MK.s 			page 3


  71:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  72:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  73:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  74:src/../h/riscv.hpp ****     };
  75:src/../h/riscv.hpp **** 
  76:src/../h/riscv.hpp ****     // mask set register sstatus
  77:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp ****     // mask clear register sstatus
  80:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  81:src/../h/riscv.hpp **** 
  82:src/../h/riscv.hpp ****     // read register sstatus
  83:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  84:src/../h/riscv.hpp **** 
  85:src/../h/riscv.hpp ****     // write register sstatus
  86:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  87:src/../h/riscv.hpp **** 
  88:src/../h/riscv.hpp ****     // supervisor trap
  89:src/../h/riscv.hpp ****     static void supervisorTrap();
  90:src/../h/riscv.hpp **** 
  91:src/../h/riscv.hpp **** private:
  92:src/../h/riscv.hpp **** 
  93:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  94:src/../h/riscv.hpp **** };
  95:src/../h/riscv.hpp **** 
  96:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
  97:src/../h/riscv.hpp **** {
  98:src/../h/riscv.hpp ****     uint64 volatile scause;
  99:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 100:src/../h/riscv.hpp ****     return scause;
 101:src/../h/riscv.hpp **** }
 102:src/../h/riscv.hpp **** 
 103:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 104:src/../h/riscv.hpp **** {
 105:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 106:src/../h/riscv.hpp **** }
 107:src/../h/riscv.hpp **** 
 108:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 109:src/../h/riscv.hpp **** {
 110:src/../h/riscv.hpp ****     uint64 volatile sepc;
 111:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 112:src/../h/riscv.hpp ****     return sepc;
 113:src/../h/riscv.hpp **** }
 114:src/../h/riscv.hpp **** 
 115:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 116:src/../h/riscv.hpp **** {
 117:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 118:src/../h/riscv.hpp **** }
 119:src/../h/riscv.hpp **** 
 120:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 121:src/../h/riscv.hpp **** {
 122:src/../h/riscv.hpp ****     uint64 volatile stvec;
 123:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 124:src/../h/riscv.hpp ****     return stvec;
 125:src/../h/riscv.hpp **** }
 126:src/../h/riscv.hpp **** 
 127:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
GAS LISTING /tmp/ccXmE4MK.s 			page 4


 128:src/../h/riscv.hpp **** {
 129:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 130:src/../h/riscv.hpp **** }
 131:src/../h/riscv.hpp **** 
 132:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 133:src/../h/riscv.hpp **** {
 134:src/../h/riscv.hpp ****     uint64 volatile stval;
 135:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 136:src/../h/riscv.hpp ****     return stval;
 137:src/../h/riscv.hpp **** }
 138:src/../h/riscv.hpp **** 
 139:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 140:src/../h/riscv.hpp **** {
 141:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 142:src/../h/riscv.hpp **** }
 143:src/../h/riscv.hpp **** 
 144:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 145:src/../h/riscv.hpp **** {
 146:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 147:src/../h/riscv.hpp **** }
 148:src/../h/riscv.hpp **** 
 149:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 150:src/../h/riscv.hpp **** {
 151:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 152:src/../h/riscv.hpp **** }
 153:src/../h/riscv.hpp **** 
 154:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 155:src/../h/riscv.hpp **** {
 156:src/../h/riscv.hpp ****     uint64 volatile sip;
 157:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 158:src/../h/riscv.hpp ****     return sip;
 159:src/../h/riscv.hpp **** }
 160:src/../h/riscv.hpp **** 
 161:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 162:src/../h/riscv.hpp **** {
 163:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 164:src/../h/riscv.hpp **** }
 165:src/../h/riscv.hpp **** 
 166:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 167:src/../h/riscv.hpp **** {
 168:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 169:src/../h/riscv.hpp **** }
 170:src/../h/riscv.hpp **** 
 171:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 172:src/../h/riscv.hpp **** {
 173:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
  28              		.loc 2 173 5
  29              		.loc 2 173 68 is_stmt 0
  30 0018 93070010 		li	a5,256
  31              	#APP
  32              	# 173 "src/../h/riscv.hpp" 1
 174              	}
  33              		csrc sstatus, a5
  34              	# 0 "" 2
  35              	.LVL1:
  36              	#NO_APP
  37              	.L3:
GAS LISTING /tmp/ccXmE4MK.s 			page 5


  38              	.LBE77:
  39              	.LBE76:
  18:src/riscv.cpp ****     }
  19:src/riscv.cpp ****     else {
  20:src/riscv.cpp ****         ms_sstatus(Riscv::SSTATUS_SPP);
  21:src/riscv.cpp ****     }
  22:src/riscv.cpp ****     __asm volatile("csrw sepc, ra");
  40              		.loc 1 22 5 is_stmt 1
  41              		.loc 1 22 36 is_stmt 0
  42              	#APP
  43              	# 22 "src/riscv.cpp" 1
  23              	    __asm volatile("sret");
  44              		csrw sepc, ra
  45              	# 0 "" 2
  46              		.loc 1 23 5 is_stmt 1
  47              		.loc 1 23 27 is_stmt 0
  48              	# 23 "src/riscv.cpp" 1
  24              	}
  49              		sret
  50              	# 0 "" 2
  51              		.loc 1 24 1
  52              	#NO_APP
  53 0028 03348100 		ld	s0,8(sp)
  54              		.cfi_remember_state
  55              		.cfi_restore 8
  56              		.cfi_def_cfa 2, 16
  57 002c 13010101 		addi	sp,sp,16
  58              		.cfi_def_cfa_offset 0
  59 0030 67800000 		jr	ra
  60              	.L2:
  61              		.cfi_restore_state
  20:src/riscv.cpp ****     }
  62              		.loc 1 20 9 is_stmt 1
  63              	.LVL2:
  64              	.LBB78:
  65              	.LBB79:
 168:src/../h/riscv.hpp **** }
  66              		.loc 2 168 5
 168:src/../h/riscv.hpp **** }
  67              		.loc 2 168 68 is_stmt 0
  68 0034 93070010 		li	a5,256
  69              	#APP
  70              	# 168 "src/../h/riscv.hpp" 1
 169:src/../h/riscv.hpp **** 
  71              		csrs sstatus, a5
  72              	# 0 "" 2
  73              		.loc 2 169 1
  74              	#NO_APP
  75 003c 6FF05FFE 		j	.L3
  76              	.LBE79:
  77              	.LBE78:
  78              		.cfi_endproc
  79              	.LFE67:
  81              		.section	.rodata.str1.8,"aMS",@progbits,1
  82              		.align	3
  83              	.LC0:
  84 0000 53434155 		.string	"SCAUSE = "
GAS LISTING /tmp/ccXmE4MK.s 			page 6


  84      5345203D 
  84      2000
  85 000a 00000000 		.align	3
  85      0000
  86              	.LC1:
  87 0010 0A534550 		.string	"\nSEPC = "
  87      43203D20 
  87      00
  88 0019 00000000 		.align	3
  88      000000
  89              	.LC2:
  90 0020 0A535456 		.string	"\nSTVAL = "
  90      414C203D 
  90      2000
  91 002a 00000000 		.align	3
  91      0000
  92              	.LC3:
  93 0030 0A00     		.string	"\n"
  94              		.text
  95              		.align	2
  96              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  98              	_ZN5Riscv20handleSupervisorTrapEv:
  99              	.LFB68:
  25:src/riscv.cpp **** 
  26:src/riscv.cpp **** using Body = void(*)(void*);
  27:src/riscv.cpp **** 
  28:src/riscv.cpp **** void Riscv::handleSupervisorTrap() {
 100              		.loc 1 28 36 is_stmt 1
 101              		.cfi_startproc
 102 0040 130101ED 		addi	sp,sp,-304
 103              		.cfi_def_cfa_offset 304
 104 0044 23341112 		sd	ra,296(sp)
 105 0048 23308112 		sd	s0,288(sp)
 106 004c 233C9110 		sd	s1,280(sp)
 107 0050 23382111 		sd	s2,272(sp)
 108              		.cfi_offset 1, -8
 109              		.cfi_offset 8, -16
 110              		.cfi_offset 9, -24
 111              		.cfi_offset 18, -32
 112 0054 13040113 		addi	s0,sp,304
 113              		.cfi_def_cfa 8, 0
  29:src/riscv.cpp ****     uint64 volatile scause = r_scause();
 114              		.loc 1 29 5
 115              	.LBB80:
 116              	.LBB81:
  98:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 117              		.loc 2 98 5
  99:src/../h/riscv.hpp ****     return scause;
 118              		.loc 2 99 5
  99:src/../h/riscv.hpp ****     return scause;
 119              		.loc 2 99 72 is_stmt 0
 120              	#APP
 121              	# 99 "src/../h/riscv.hpp" 1
 122              		csrr a5, scause
 123              	# 0 "" 2
 124              	#NO_APP
 125 005c 2338F4F6 		sd	a5,-144(s0)
GAS LISTING /tmp/ccXmE4MK.s 			page 7


 100:src/../h/riscv.hpp **** }
 126              		.loc 2 100 5 is_stmt 1
 100:src/../h/riscv.hpp **** }
 127              		.loc 2 100 12 is_stmt 0
 128 0060 833704F7 		ld	a5,-144(s0)
 129              	.LBE81:
 130              	.LBE80:
 131              		.loc 1 29 39
 132 0064 233CF4FC 		sd	a5,-40(s0)
  30:src/riscv.cpp **** 
  31:src/riscv.cpp ****     // read the args
  32:src/riscv.cpp ****     uint64 volatile arg1;
 133              		.loc 1 32 5 is_stmt 1
  33:src/riscv.cpp ****     __asm__ volatile("mv %[a], a0" : [a] "=r" (arg1));
 134              		.loc 1 33 5
 135              		.loc 1 33 54 is_stmt 0
 136              	#APP
 137              	# 33 "src/riscv.cpp" 1
  34              	    uint64 volatile arg2;
 138              		mv a5, a0
 139              	# 0 "" 2
 140              	#NO_APP
 141 006c 2338F4FC 		sd	a5,-48(s0)
 142              		.loc 1 34 5 is_stmt 1
  35:src/riscv.cpp ****     __asm__ volatile("mv %[a], a1" : [a] "=r" (arg2));
 143              		.loc 1 35 5
 144              		.loc 1 35 54 is_stmt 0
 145              	#APP
 146              	# 35 "src/riscv.cpp" 1
  36              	    uint64 volatile arg3;
 147              		mv a5, a1
 148              	# 0 "" 2
 149              	#NO_APP
 150 0074 2334F4FC 		sd	a5,-56(s0)
 151              		.loc 1 36 5 is_stmt 1
  37:src/riscv.cpp ****     __asm__ volatile("mv %[a], a2" : [a] "=r" (arg3));
 152              		.loc 1 37 5
 153              		.loc 1 37 54 is_stmt 0
 154              	#APP
 155              	# 37 "src/riscv.cpp" 1
  38              	    uint64 volatile arg4;
 156              		mv a5, a2
 157              	# 0 "" 2
 158              	#NO_APP
 159 007c 2330F4FC 		sd	a5,-64(s0)
 160              		.loc 1 38 5 is_stmt 1
  39:src/riscv.cpp ****     __asm__ volatile("mv %[a], a3" : [a] "=r" (arg4));
 161              		.loc 1 39 5
 162              		.loc 1 39 54 is_stmt 0
 163              	#APP
 164              	# 39 "src/riscv.cpp" 1
  40              	
 165              		mv a5, a3
 166              	# 0 "" 2
 167              	#NO_APP
 168 0084 233CF4FA 		sd	a5,-72(s0)
  41:src/riscv.cpp ****     // Check if syscall happened
GAS LISTING /tmp/ccXmE4MK.s 			page 8


  42:src/riscv.cpp ****     if (scause == SCAUSE::SYSCALL_USER || scause == SCAUSE::SYSCALL_SYSTEM) {
 169              		.loc 1 42 5 is_stmt 1
 170              	.LBB82:
 171              		.loc 1 42 16 is_stmt 0
 172 0088 033784FD 		ld	a4,-40(s0)
 173              		.loc 1 42 40
 174 008c 93078000 		li	a5,8
 175 0090 630CF70E 		beq	a4,a5,.L6
 176              		.loc 1 42 50 discriminator 2
 177 0094 033784FD 		ld	a4,-40(s0)
 178              		.loc 1 42 40 discriminator 2
 179 0098 93079000 		li	a5,9
 180 009c 6306F70E 		beq	a4,a5,.L6
 181              	.LBE82:
  43:src/riscv.cpp ****         uint64 volatile sepc = r_sepc();
  44:src/riscv.cpp ****         sepc += 4;
  45:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
  46:src/riscv.cpp **** 
  47:src/riscv.cpp ****         sem_t volatile handle;
  48:src/riscv.cpp ****         int volatile ret;
  49:src/riscv.cpp **** 
  50:src/riscv.cpp ****         uint64 volatile syscall_id = arg1;
  51:src/riscv.cpp **** 
  52:src/riscv.cpp ****         switch (syscall_id) {
  53:src/riscv.cpp **** 
  54:src/riscv.cpp ****             // mem_alloc system call
  55:src/riscv.cpp ****             case SYSCALLS::MEM_ALLOC:
  56:src/riscv.cpp ****                 size_t volatile size;
  57:src/riscv.cpp ****                 void* volatile ptr;
  58:src/riscv.cpp **** 
  59:src/riscv.cpp ****                 size = (size_t)arg2;
  60:src/riscv.cpp **** 
  61:src/riscv.cpp ****                 ptr = MemoryAllocator::mem_alloc(size);
  62:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %[ret]" : : [ret] "r" (ptr));
  63:src/riscv.cpp **** 
  64:src/riscv.cpp ****                 break;
  65:src/riscv.cpp **** 
  66:src/riscv.cpp ****             // mem_free system call
  67:src/riscv.cpp ****             case SYSCALLS::MEM_FREE:
  68:src/riscv.cpp ****                 int volatile code;
  69:src/riscv.cpp ****                 void* volatile mem;
  70:src/riscv.cpp **** 
  71:src/riscv.cpp ****                 mem = (void*)arg2;
  72:src/riscv.cpp **** 
  73:src/riscv.cpp ****                 code = MemoryAllocator::mem_free((void*)mem);
  74:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %[ret]" : : [ret] "r" (code));
  75:src/riscv.cpp **** 
  76:src/riscv.cpp ****                 break;
  77:src/riscv.cpp **** 
  78:src/riscv.cpp ****             // thread_create system call
  79:src/riscv.cpp ****             case SYSCALLS::THREAD_CREATE:
  80:src/riscv.cpp ****                 TCB** volatile tcb;
  81:src/riscv.cpp ****                 Body volatile body;
  82:src/riscv.cpp ****                 void* volatile arg;
  83:src/riscv.cpp **** 
  84:src/riscv.cpp ****                 tcb = (TCB**)arg2;
  85:src/riscv.cpp ****                 body = (Body)arg3;
GAS LISTING /tmp/ccXmE4MK.s 			page 9


  86:src/riscv.cpp ****                 arg = (void*)arg4;
  87:src/riscv.cpp **** 
  88:src/riscv.cpp ****                 // execute syscall
  89:src/riscv.cpp ****                 *tcb = TCB::createThread(body, (void*)arg, DEFAULT_TIME_SLICE);
  90:src/riscv.cpp **** 
  91:src/riscv.cpp ****                 // return value
  92:src/riscv.cpp ****                 if (tcb)
  93:src/riscv.cpp ****                     __asm__ volatile ("li a0, 0");
  94:src/riscv.cpp ****                 else
  95:src/riscv.cpp ****                     __asm__ volatile ("li a0, -1");
  96:src/riscv.cpp **** 
  97:src/riscv.cpp ****                 break;
  98:src/riscv.cpp **** 
  99:src/riscv.cpp ****             // thread_exit system call
 100:src/riscv.cpp ****             case SYSCALLS::THREAD_EXIT:
 101:src/riscv.cpp ****                 TCB::running->setFinished(true);
 102:src/riscv.cpp ****                 thread_dispatch();
 103:src/riscv.cpp ****                 __asm__ volatile ("li a0, 0");
 104:src/riscv.cpp ****                 break;
 105:src/riscv.cpp **** 
 106:src/riscv.cpp ****             // thread_dispatch system call
 107:src/riscv.cpp ****             case SYSCALLS::THREAD_DISPATCH:
 108:src/riscv.cpp ****                 TCB::dispatch();
 109:src/riscv.cpp ****                 break;
 110:src/riscv.cpp **** 
 111:src/riscv.cpp ****             // time_sleep system call
 112:src/riscv.cpp ****             case SYSCALLS::TIME_SLEEP:
 113:src/riscv.cpp ****                 time_t volatile time;
 114:src/riscv.cpp ****                 time = (time_t)arg2;
 115:src/riscv.cpp **** 
 116:src/riscv.cpp ****                 if (time != 0) {
 117:src/riscv.cpp ****                     TCB::running->setSleepingTime(time);
 118:src/riscv.cpp ****                     TCB::running->setSleep(true);
 119:src/riscv.cpp **** 
 120:src/riscv.cpp ****                     WaitList::add(TCB::running);
 121:src/riscv.cpp ****                     thread_dispatch();
 122:src/riscv.cpp ****                 }
 123:src/riscv.cpp **** 
 124:src/riscv.cpp ****                 break;
 125:src/riscv.cpp **** 
 126:src/riscv.cpp ****             // sem_init system call
 127:src/riscv.cpp ****             case SYSCALLS::SEM_OPEN:
 128:src/riscv.cpp ****                 sem_t* volatile handleT;
 129:src/riscv.cpp ****                 unsigned volatile init;
 130:src/riscv.cpp **** 
 131:src/riscv.cpp ****                 handleT = (sem_t*)arg2;
 132:src/riscv.cpp ****                 init = (int)arg3;
 133:src/riscv.cpp **** 
 134:src/riscv.cpp ****                 *handleT = _Semaphore::createSemaphore(init);
 135:src/riscv.cpp **** 
 136:src/riscv.cpp ****                 if (*handleT)
 137:src/riscv.cpp ****                     __asm__ volatile ("mv a0, %0" : : "r" (0));
 138:src/riscv.cpp ****                 else
 139:src/riscv.cpp ****                     __asm__ volatile ("mv a0, %0" : : "r" (-1));
 140:src/riscv.cpp **** 
 141:src/riscv.cpp ****                 break;
 142:src/riscv.cpp **** 
GAS LISTING /tmp/ccXmE4MK.s 			page 10


 143:src/riscv.cpp ****             // sem_close system call
 144:src/riscv.cpp ****             case SYSCALLS::SEM_CLOSE:
 145:src/riscv.cpp ****                 handle = (sem_t)arg2;
 146:src/riscv.cpp ****                 ret = handle->close();
 147:src/riscv.cpp **** 
 148:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %[r]" : : [r] "r" (ret));
 149:src/riscv.cpp ****                 break;
 150:src/riscv.cpp **** 
 151:src/riscv.cpp ****             // sem_wait system call
 152:src/riscv.cpp ****             case SYSCALLS::SEM_WAIT:
 153:src/riscv.cpp ****                 handle = (sem_t)arg2;
 154:src/riscv.cpp **** 
 155:src/riscv.cpp ****                 ret = handle->wait();
 156:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %[r]" : : [r] "r" (ret));
 157:src/riscv.cpp ****                 break;
 158:src/riscv.cpp **** 
 159:src/riscv.cpp ****             // sem_signal system call
 160:src/riscv.cpp ****             case SYSCALLS::SEM_SIGNAL:
 161:src/riscv.cpp ****                 handle = (sem_t)arg2;
 162:src/riscv.cpp **** 
 163:src/riscv.cpp ****                 ret = handle->signal();
 164:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %[r]" : : [r] "r" (ret));
 165:src/riscv.cpp ****                 break;
 166:src/riscv.cpp **** 
 167:src/riscv.cpp ****             // sem_trywait system call
 168:src/riscv.cpp ****             case SYSCALLS::SEM_TRYWAIT:
 169:src/riscv.cpp ****                 handle = (sem_t)arg2;
 170:src/riscv.cpp **** 
 171:src/riscv.cpp ****                 ret = handle->tryWait();
 172:src/riscv.cpp **** 
 173:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %[r]" : : [r] "r" (ret));
 174:src/riscv.cpp **** 
 175:src/riscv.cpp ****                 break;
 176:src/riscv.cpp **** 
 177:src/riscv.cpp ****             // sem_timedwait system call
 178:src/riscv.cpp ****             case SYSCALLS::SEM_TIMEDWAIT:
 179:src/riscv.cpp ****                 handle = (sem_t)arg2;
 180:src/riscv.cpp ****                 time_t volatile timeout;
 181:src/riscv.cpp ****                 timeout = (time_t)arg3;
 182:src/riscv.cpp **** 
 183:src/riscv.cpp ****                 ret = handle->timedwait(timeout);
 184:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %[r]" : : [r] "r" (ret));
 185:src/riscv.cpp **** 
 186:src/riscv.cpp ****                 break;
 187:src/riscv.cpp **** 
 188:src/riscv.cpp ****             // getc system call
 189:src/riscv.cpp ****             case SYSCALLS::GETC:
 190:src/riscv.cpp ****                 ret = _Console::GETC();
 191:src/riscv.cpp ****                 // ret = __getc();
 192:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %[r]" : : [r] "r" (ret));
 193:src/riscv.cpp ****                 break;
 194:src/riscv.cpp **** 
 195:src/riscv.cpp ****             // putc system call
 196:src/riscv.cpp ****             case SYSCALLS::PUTC:
 197:src/riscv.cpp ****                 char volatile c;
 198:src/riscv.cpp ****                 c = (char)arg2;
 199:src/riscv.cpp ****                 _Console::PUTC(c);
GAS LISTING /tmp/ccXmE4MK.s 			page 11


 200:src/riscv.cpp ****                 // __putc(c);
 201:src/riscv.cpp ****                 break;
 202:src/riscv.cpp **** 
 203:src/riscv.cpp ****             case SYSCALLS::PUTC_HANDLER:
 204:src/riscv.cpp ****                 _Console::putcHandler();
 205:src/riscv.cpp ****                 break;
 206:src/riscv.cpp ****         }
 207:src/riscv.cpp **** 
 208:src/riscv.cpp ****         w_sepc(sepc);
 209:src/riscv.cpp ****         w_sstatus(sstatus);
 210:src/riscv.cpp ****     }
 211:src/riscv.cpp ****     else if (scause == SCAUSE::HARDWARE) {
 182              		.loc 1 211 10 is_stmt 1
 183              	.LBB144:
 184              	.LBB83:
 185              		.loc 1 211 21 is_stmt 0
 186 00a0 033784FD 		ld	a4,-40(s0)
 187              		.loc 1 211 10
 188 00a4 9307F0FF 		li	a5,-1
 189 00a8 9397F703 		slli	a5,a5,63
 190 00ac 93879700 		addi	a5,a5,9
 191 00b0 6304F73C 		beq	a4,a5,.L33
 192              	.LBE83:
 193              	.LBE144:
 212:src/riscv.cpp ****         uint64 volatile sepc = r_sepc();
 213:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 214:src/riscv.cpp ****         //console_handler();
 215:src/riscv.cpp ****         _Console::console_handler();
 216:src/riscv.cpp ****         __asm__ volatile ("mv a0, %[r]" : : [r] "r" (arg1));
 217:src/riscv.cpp ****         w_sepc(sepc);
 218:src/riscv.cpp ****         w_sstatus(sstatus);
 219:src/riscv.cpp ****     }
 220:src/riscv.cpp ****     else if (scause == SCAUSE::SOFTWARE) {
 194              		.loc 1 220 10 is_stmt 1
 195              	.LBB145:
 196              	.LBB112:
 197              	.LBB84:
 198              		.loc 1 220 21 is_stmt 0
 199 00b4 033784FD 		ld	a4,-40(s0)
 200              		.loc 1 220 10
 201 00b8 9307F0FF 		li	a5,-1
 202 00bc 9397F703 		slli	a5,a5,63
 203 00c0 93871700 		addi	a5,a5,1
 204 00c4 630CF73E 		beq	a4,a5,.L34
 221:src/riscv.cpp ****         Riscv::mc_sip(SIP_SSIP);
 222:src/riscv.cpp ****         uint64 volatile sepc = r_sepc();
 223:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 224:src/riscv.cpp **** 
 225:src/riscv.cpp ****         WaitList::wake();
 226:src/riscv.cpp **** 
 227:src/riscv.cpp ****         TCB::timeSliceCounter++;
 228:src/riscv.cpp **** 
 229:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
 230:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 231:src/riscv.cpp ****             TCB::dispatch();
 232:src/riscv.cpp ****         }
 233:src/riscv.cpp ****         w_sepc(sepc);
GAS LISTING /tmp/ccXmE4MK.s 			page 12


 234:src/riscv.cpp ****         w_sstatus(sstatus);
 235:src/riscv.cpp ****     }
 236:src/riscv.cpp ****     else {
 237:src/riscv.cpp ****         // Unknown interrupt
 238:src/riscv.cpp ****         putc('\n');
 205              		.loc 1 238 9 is_stmt 1
 206              		.loc 1 238 13 is_stmt 0
 207 00c8 1305A000 		li	a0,10
 208 00cc 97000000 		call	_Z4putcc@plt
 208      E7800000 
 209              	.LVL3:
 239:src/riscv.cpp ****         printString("SCAUSE = ");
 210              		.loc 1 239 9 is_stmt 1
 211              		.loc 1 239 20 is_stmt 0
 212 00d4 17050000 		lla	a0,.LC0
 212      13050500 
 213 00dc 97000000 		call	_Z11printStringPKc@plt
 213      E7800000 
 214              	.LVL4:
 240:src/riscv.cpp ****         printInt(scause);
 215              		.loc 1 240 9 is_stmt 1
 216              		.loc 1 240 17 is_stmt 0
 217 00e4 033584FD 		ld	a0,-40(s0)
 218 00e8 13060000 		li	a2,0
 219 00ec 9305A000 		li	a1,10
 220 00f0 1B050500 		sext.w	a0,a0
 221 00f4 97000000 		call	_Z8printIntiii@plt
 221      E7800000 
 222              	.LVL5:
 241:src/riscv.cpp ****         printString("\nSEPC = ");
 223              		.loc 1 241 9 is_stmt 1
 224              		.loc 1 241 20 is_stmt 0
 225 00fc 17050000 		lla	a0,.LC1
 225      13050500 
 226 0104 97000000 		call	_Z11printStringPKc@plt
 226      E7800000 
 227              	.LVL6:
 242:src/riscv.cpp ****         printInt(r_sepc());
 228              		.loc 1 242 9 is_stmt 1
 229              	.LBB85:
 230              	.LBB86:
 110:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 231              		.loc 2 110 5
 111:src/../h/riscv.hpp ****     return sepc;
 232              		.loc 2 111 5
 111:src/../h/riscv.hpp ****     return sepc;
 233              		.loc 2 111 64 is_stmt 0
 234              	#APP
 235              	# 111 "src/../h/riscv.hpp" 1
 236              		csrr a5, sepc
 237              	# 0 "" 2
 238              	#NO_APP
 239 0110 2338F4FA 		sd	a5,-80(s0)
 112:src/../h/riscv.hpp **** }
 240              		.loc 2 112 5 is_stmt 1
 112:src/../h/riscv.hpp **** }
 241              		.loc 2 112 12 is_stmt 0
GAS LISTING /tmp/ccXmE4MK.s 			page 13


 242 0114 033504FB 		ld	a0,-80(s0)
 243              	.LBE86:
 244              	.LBE85:
 245              		.loc 1 242 17
 246 0118 13060000 		li	a2,0
 247 011c 9305A000 		li	a1,10
 248 0120 1B050500 		sext.w	a0,a0
 249 0124 97000000 		call	_Z8printIntiii@plt
 249      E7800000 
 250              	.LVL7:
 243:src/riscv.cpp ****         printString("\nSTVAL = ");
 251              		.loc 1 243 9 is_stmt 1
 252              		.loc 1 243 20 is_stmt 0
 253 012c 17050000 		lla	a0,.LC2
 253      13050500 
 254 0134 97000000 		call	_Z11printStringPKc@plt
 254      E7800000 
 255              	.LVL8:
 244:src/riscv.cpp ****         printInt(r_stval());
 256              		.loc 1 244 9 is_stmt 1
 257              	.LBB87:
 258              	.LBB88:
 134:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 259              		.loc 2 134 5
 135:src/../h/riscv.hpp ****     return stval;
 260              		.loc 2 135 5
 135:src/../h/riscv.hpp ****     return stval;
 261              		.loc 2 135 68 is_stmt 0
 262              	#APP
 263              	# 135 "src/../h/riscv.hpp" 1
 264              		csrr a5, stval
 265              	# 0 "" 2
 266              	#NO_APP
 267 0140 2334F4FA 		sd	a5,-88(s0)
 136:src/../h/riscv.hpp **** }
 268              		.loc 2 136 5 is_stmt 1
 136:src/../h/riscv.hpp **** }
 269              		.loc 2 136 12 is_stmt 0
 270 0144 033584FA 		ld	a0,-88(s0)
 271              	.LBE88:
 272              	.LBE87:
 273              		.loc 1 244 17
 274 0148 13060000 		li	a2,0
 275 014c 9305A000 		li	a1,10
 276 0150 1B050500 		sext.w	a0,a0
 277 0154 97000000 		call	_Z8printIntiii@plt
 277      E7800000 
 278              	.LVL9:
 245:src/riscv.cpp ****         printString("\n");
 279              		.loc 1 245 9 is_stmt 1
 280              		.loc 1 245 20 is_stmt 0
 281 015c 17050000 		lla	a0,.LC3
 281      13050500 
 282 0164 97000000 		call	_Z11printStringPKc@plt
 282      E7800000 
 283              	.LVL10:
 246:src/riscv.cpp ****         _Console::flush();
GAS LISTING /tmp/ccXmE4MK.s 			page 14


 284              		.loc 1 246 9 is_stmt 1
 285              		.loc 1 246 24 is_stmt 0
 286 016c 97000000 		call	_ZN8_Console5flushEv@plt
 286      E7800000 
 287              	.LVL11:
 247:src/riscv.cpp ****         __asm__ volatile ("li a0, 0x5555");
 288              		.loc 1 247 9 is_stmt 1
 289              		.loc 1 247 43 is_stmt 0
 290              	#APP
 291              	# 247 "src/riscv.cpp" 1
 248              	        __asm__ volatile ("li a1, 0x100000");
 292              		li a0, 0x5555
 293              	# 0 "" 2
 294              		.loc 1 248 9 is_stmt 1
 295              		.loc 1 248 45 is_stmt 0
 296              	# 248 "src/riscv.cpp" 1
 249              	        __asm__ volatile ("sw a0, 0(a1)");
 297              		li a1, 0x100000
 298              	# 0 "" 2
 299              		.loc 1 249 9 is_stmt 1
 300              		.loc 1 249 42 is_stmt 0
 301              	# 249 "src/riscv.cpp" 1
 250              	    }
 302              		sw a0, 0(a1)
 303              	# 0 "" 2
 304              	#NO_APP
 305              	.LBE84:
 306              	.LBE112:
 307              	.LBE145:
 251:src/riscv.cpp **** 
 252:src/riscv.cpp **** }...
 308              		.loc 1 252 1
 309 0184 6F000009 		j	.L5
 310              	.L6:
 311              	.LBB146:
 312              	.LBB113:
  43:src/riscv.cpp ****         uint64 volatile sepc = r_sepc();
 313              		.loc 1 43 9 is_stmt 1
 314              	.LBB114:
 315              	.LBB115:
 110:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 316              		.loc 2 110 5
 111:src/../h/riscv.hpp ****     return sepc;
 317              		.loc 2 111 5
 111:src/../h/riscv.hpp ****     return sepc;
 318              		.loc 2 111 64 is_stmt 0
 319              	#APP
 320              	# 111 "src/../h/riscv.hpp" 1
 321              		csrr a5, sepc
 322              	# 0 "" 2
 323              	#NO_APP
 324 018c 2330F4F8 		sd	a5,-128(s0)
 112:src/../h/riscv.hpp **** }
 325              		.loc 2 112 5 is_stmt 1
 112:src/../h/riscv.hpp **** }
 326              		.loc 2 112 12 is_stmt 0
 327 0190 833704F8 		ld	a5,-128(s0)
GAS LISTING /tmp/ccXmE4MK.s 			page 15


 328              	.LBE115:
 329              	.LBE114:
  43:src/riscv.cpp ****         uint64 volatile sepc = r_sepc();
 330              		.loc 1 43 39
 331 0194 2334F4EE 		sd	a5,-280(s0)
  44:src/riscv.cpp ****         sepc += 4;
 332              		.loc 1 44 9 is_stmt 1
  44:src/riscv.cpp ****         sepc += 4;
 333              		.loc 1 44 14 is_stmt 0
 334 0198 833784EE 		ld	a5,-280(s0)
 335 019c 93874700 		addi	a5,a5,4
 336 01a0 2334F4EE 		sd	a5,-280(s0)
  45:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 337              		.loc 1 45 9 is_stmt 1
 338              	.LBB116:
 339              	.LBB117:
 175:src/../h/riscv.hpp **** 
 176:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 177:src/../h/riscv.hpp **** {
 178:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 340              		.loc 2 178 5
 179:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 341              		.loc 2 179 5
 342              		.loc 2 179 76 is_stmt 0
 343              	#APP
 344              	# 179 "src/../h/riscv.hpp" 1
 180              	    return sstatus;
 345              		csrr a5, sstatus
 346              	# 0 "" 2
 347              	#NO_APP
 348 01a8 233CF4F6 		sd	a5,-136(s0)
 349              		.loc 2 180 5 is_stmt 1
 350              		.loc 2 180 12 is_stmt 0
 351 01ac 833784F7 		ld	a5,-136(s0)
 352              	.LBE117:
 353              	.LBE116:
  45:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 354              		.loc 1 45 45
 355 01b0 2338F4EE 		sd	a5,-272(s0)
  47:src/riscv.cpp ****         sem_t volatile handle;
 356              		.loc 1 47 9 is_stmt 1
  48:src/riscv.cpp ****         int volatile ret;
 357              		.loc 1 48 9
  50:src/riscv.cpp ****         uint64 volatile syscall_id = arg1;
 358              		.loc 1 50 9
  50:src/riscv.cpp ****         uint64 volatile syscall_id = arg1;
 359              		.loc 1 50 38 is_stmt 0
 360 01b4 833704FD 		ld	a5,-48(s0)
 361 01b8 2330F4F0 		sd	a5,-256(s0)
  52:src/riscv.cpp ****         switch (syscall_id) {
 362              		.loc 1 52 9 is_stmt 1
 363              	.LBB118:
  52:src/riscv.cpp ****         switch (syscall_id) {
 364              		.loc 1 52 17 is_stmt 0
 365 01bc 833704F0 		ld	a5,-256(s0)
 366 01c0 13073004 		li	a4,67
 367 01c4 6360F704 		bgtu	a5,a4,.L9
GAS LISTING /tmp/ccXmE4MK.s 			page 16


 368 01c8 93972700 		slli	a5,a5,2
 369 01cc 17070000 		lla	a4,.L11
 369      13070700 
 370 01d4 B387E700 		add	a5,a5,a4
 371 01d8 83A70700 		lw	a5,0(a5)
 372 01dc B387E700 		add	a5,a5,a4
 373 01e0 67800700 		jr	a5
 374              		.section	.rodata
 375              		.align	2
 376              		.align	2
 377              	.L11:
 378 0000 00000000 		.word	.L9-.L11
 379 0004 00000000 		.word	.L25-.L11
 380 0008 00000000 		.word	.L24-.L11
 381 000c 00000000 		.word	.L9-.L11
 382 0010 00000000 		.word	.L9-.L11
 383 0014 00000000 		.word	.L9-.L11
 384 0018 00000000 		.word	.L9-.L11
 385 001c 00000000 		.word	.L9-.L11
 386 0020 00000000 		.word	.L9-.L11
 387 0024 00000000 		.word	.L9-.L11
 388 0028 00000000 		.word	.L9-.L11
 389 002c 00000000 		.word	.L9-.L11
 390 0030 00000000 		.word	.L9-.L11
 391 0034 00000000 		.word	.L9-.L11
 392 0038 00000000 		.word	.L9-.L11
 393 003c 00000000 		.word	.L9-.L11
 394 0040 00000000 		.word	.L9-.L11
 395 0044 00000000 		.word	.L23-.L11
 396 0048 00000000 		.word	.L22-.L11
 397 004c 00000000 		.word	.L21-.L11
 398 0050 00000000 		.word	.L9-.L11
 399 0054 00000000 		.word	.L9-.L11
 400 0058 00000000 		.word	.L9-.L11
 401 005c 00000000 		.word	.L9-.L11
 402 0060 00000000 		.word	.L9-.L11
 403 0064 00000000 		.word	.L9-.L11
 404 0068 00000000 		.word	.L9-.L11
 405 006c 00000000 		.word	.L9-.L11
 406 0070 00000000 		.word	.L9-.L11
 407 0074 00000000 		.word	.L9-.L11
 408 0078 00000000 		.word	.L9-.L11
 409 007c 00000000 		.word	.L9-.L11
 410 0080 00000000 		.word	.L9-.L11
 411 0084 00000000 		.word	.L20-.L11
 412 0088 00000000 		.word	.L19-.L11
 413 008c 00000000 		.word	.L18-.L11
 414 0090 00000000 		.word	.L17-.L11
 415 0094 00000000 		.word	.L16-.L11
 416 0098 00000000 		.word	.L15-.L11
 417 009c 00000000 		.word	.L9-.L11
 418 00a0 00000000 		.word	.L9-.L11
 419 00a4 00000000 		.word	.L9-.L11
 420 00a8 00000000 		.word	.L9-.L11
 421 00ac 00000000 		.word	.L9-.L11
 422 00b0 00000000 		.word	.L9-.L11
 423 00b4 00000000 		.word	.L9-.L11
GAS LISTING /tmp/ccXmE4MK.s 			page 17


 424 00b8 00000000 		.word	.L9-.L11
 425 00bc 00000000 		.word	.L9-.L11
 426 00c0 00000000 		.word	.L9-.L11
 427 00c4 00000000 		.word	.L14-.L11
 428 00c8 00000000 		.word	.L9-.L11
 429 00cc 00000000 		.word	.L9-.L11
 430 00d0 00000000 		.word	.L9-.L11
 431 00d4 00000000 		.word	.L9-.L11
 432 00d8 00000000 		.word	.L9-.L11
 433 00dc 00000000 		.word	.L9-.L11
 434 00e0 00000000 		.word	.L9-.L11
 435 00e4 00000000 		.word	.L9-.L11
 436 00e8 00000000 		.word	.L9-.L11
 437 00ec 00000000 		.word	.L9-.L11
 438 00f0 00000000 		.word	.L9-.L11
 439 00f4 00000000 		.word	.L9-.L11
 440 00f8 00000000 		.word	.L9-.L11
 441 00fc 00000000 		.word	.L9-.L11
 442 0100 00000000 		.word	.L9-.L11
 443 0104 00000000 		.word	.L13-.L11
 444 0108 00000000 		.word	.L12-.L11
 445 010c 00000000 		.word	.L10-.L11
 446              		.text
 447              	.L25:
 448              	.LBB119:
  55:src/riscv.cpp ****             case SYSCALLS::MEM_ALLOC:
 449              		.loc 1 55 13 is_stmt 1
  56:src/riscv.cpp ****                 size_t volatile size;
 450              		.loc 1 56 17
  57:src/riscv.cpp ****                 void* volatile ptr;
 451              		.loc 1 57 17
  59:src/riscv.cpp ****                 size = (size_t)arg2;
 452              		.loc 1 59 17
  59:src/riscv.cpp ****                 size = (size_t)arg2;
 453              		.loc 1 59 22 is_stmt 0
 454 01e4 833784FC 		ld	a5,-56(s0)
 455 01e8 2334F4F0 		sd	a5,-248(s0)
  61:src/riscv.cpp ****                 ptr = MemoryAllocator::mem_alloc(size);
 456              		.loc 1 61 17 is_stmt 1
  61:src/riscv.cpp ****                 ptr = MemoryAllocator::mem_alloc(size);
 457              		.loc 1 61 49 is_stmt 0
 458 01ec 033584F0 		ld	a0,-248(s0)
 459 01f0 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
 459      E7800000 
 460              	.LVL12:
  61:src/riscv.cpp ****                 ptr = MemoryAllocator::mem_alloc(size);
 461              		.loc 1 61 21
 462 01f8 2338A4F0 		sd	a0,-240(s0)
  62:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %[ret]" : : [ret] "r" (ptr));
 463              		.loc 1 62 17 is_stmt 1
  62:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %[ret]" : : [ret] "r" (ptr));
 464              		.loc 1 62 66 is_stmt 0
 465 01fc 833704F1 		ld	a5,-240(s0)
  62:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %[ret]" : : [ret] "r" (ptr));
 466              		.loc 1 62 71
 467              	#APP
 468              	# 62 "src/riscv.cpp" 1
GAS LISTING /tmp/ccXmE4MK.s 			page 18


  64:src/riscv.cpp ****                 break;
 469              		mv a0, a5
 470              	# 0 "" 2
 471              		.loc 1 64 17 is_stmt 1
 472              	#NO_APP
 473              	.L9:
 474              	.LBE119:
 475              	.LBE118:
 208:src/riscv.cpp ****         w_sepc(sepc);
 476              		.loc 1 208 9
 208:src/riscv.cpp ****         w_sepc(sepc);
 477              		.loc 1 208 15 is_stmt 0
 478 0204 833784EE 		ld	a5,-280(s0)
 479              	.LVL13:
 480              	.LBB135:
 481              	.LBB136:
 117:src/../h/riscv.hpp **** }
 482              		.loc 2 117 5 is_stmt 1
 117:src/../h/riscv.hpp **** }
 483              		.loc 2 117 65 is_stmt 0
 484              	#APP
 485              	# 117 "src/../h/riscv.hpp" 1
 486              		csrw sepc, a5
 487              	# 0 "" 2
 488              	.LVL14:
 489              	#NO_APP
 490              	.LBE136:
 491              	.LBE135:
 209:src/riscv.cpp ****         w_sstatus(sstatus);
 492              		.loc 1 209 9 is_stmt 1
 209:src/riscv.cpp ****         w_sstatus(sstatus);
 493              		.loc 1 209 18 is_stmt 0
 494 020c 833704EF 		ld	a5,-272(s0)
 495              	.LVL15:
 496              	.LBB137:
 497              	.LBB138:
 181:src/../h/riscv.hpp **** }
 182:src/../h/riscv.hpp **** 
 183:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 184:src/../h/riscv.hpp **** {
 185:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 498              		.loc 2 185 5 is_stmt 1
 499              		.loc 2 185 77 is_stmt 0
 500              	#APP
 501              	# 185 "src/../h/riscv.hpp" 1
 186              	}
 502              		csrw sstatus, a5
 503              	# 0 "" 2
 504              	.LVL16:
 505              	#NO_APP
 506              	.L5:
 507              	.LBE138:
 508              	.LBE137:
 509              	.LBE113:
 510              	.LBE146:
 511              		.loc 1 252 1
 512 0214 83308112 		ld	ra,296(sp)
GAS LISTING /tmp/ccXmE4MK.s 			page 19


 513              		.cfi_remember_state
 514              		.cfi_restore 1
 515 0218 03340112 		ld	s0,288(sp)
 516              		.cfi_restore 8
 517              		.cfi_def_cfa 2, 304
 518 021c 83348111 		ld	s1,280(sp)
 519              		.cfi_restore 9
 520 0220 03390111 		ld	s2,272(sp)
 521              		.cfi_restore 18
 522 0224 13010113 		addi	sp,sp,304
 523              		.cfi_def_cfa_offset 0
 524 0228 67800000 		jr	ra
 525              	.L24:
 526              		.cfi_restore_state
 527              	.LBB147:
 528              	.LBB141:
 529              	.LBB139:
 530              	.LBB133:
  67:src/riscv.cpp ****             case SYSCALLS::MEM_FREE:
 531              		.loc 1 67 13 is_stmt 1
  68:src/riscv.cpp ****                 int volatile code;
 532              		.loc 1 68 17
  69:src/riscv.cpp ****                 void* volatile mem;
 533              		.loc 1 69 17
  71:src/riscv.cpp ****                 mem = (void*)arg2;
 534              		.loc 1 71 17
  71:src/riscv.cpp ****                 mem = (void*)arg2;
 535              		.loc 1 71 21 is_stmt 0
 536 022c 833784FC 		ld	a5,-56(s0)
 537 0230 233CF4F0 		sd	a5,-232(s0)
  73:src/riscv.cpp ****                 code = MemoryAllocator::mem_free((void*)mem);
 538              		.loc 1 73 17 is_stmt 1
  73:src/riscv.cpp ****                 code = MemoryAllocator::mem_free((void*)mem);
 539              		.loc 1 73 49 is_stmt 0
 540 0234 033584F1 		ld	a0,-232(s0)
 541 0238 97000000 		call	_ZN15MemoryAllocator8mem_freeEPv@plt
 541      E7800000 
 542              	.LVL17:
  73:src/riscv.cpp ****                 code = MemoryAllocator::mem_free((void*)mem);
 543              		.loc 1 73 22
 544 0240 2320A4EE 		sw	a0,-288(s0)
  74:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %[ret]" : : [ret] "r" (code));
 545              		.loc 1 74 17 is_stmt 1
  74:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %[ret]" : : [ret] "r" (code));
 546              		.loc 1 74 66 is_stmt 0
 547 0244 832704EE 		lw	a5,-288(s0)
  74:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %[ret]" : : [ret] "r" (code));
 548              		.loc 1 74 72
 549              	#APP
 550              	# 74 "src/riscv.cpp" 1
  76:src/riscv.cpp ****                 break;
 551              		mv a0, a5
 552              	# 0 "" 2
 553              		.loc 1 76 17 is_stmt 1
 554              	#NO_APP
 555 024c 6FF09FFB 		j	.L9
 556              	.L23:
GAS LISTING /tmp/ccXmE4MK.s 			page 20


  79:src/riscv.cpp ****             case SYSCALLS::THREAD_CREATE:
 557              		.loc 1 79 13
  80:src/riscv.cpp ****                 TCB** volatile tcb;
 558              		.loc 1 80 17
  81:src/riscv.cpp ****                 Body volatile body;
 559              		.loc 1 81 17
  82:src/riscv.cpp ****                 void* volatile arg;
 560              		.loc 1 82 17
  84:src/riscv.cpp ****                 tcb = (TCB**)arg2;
 561              		.loc 1 84 17
  84:src/riscv.cpp ****                 tcb = (TCB**)arg2;
 562              		.loc 1 84 21 is_stmt 0
 563 0250 833784FC 		ld	a5,-56(s0)
 564 0254 2330F4F2 		sd	a5,-224(s0)
  85:src/riscv.cpp ****                 body = (Body)arg3;
 565              		.loc 1 85 17 is_stmt 1
  85:src/riscv.cpp ****                 body = (Body)arg3;
 566              		.loc 1 85 22 is_stmt 0
 567 0258 833704FC 		ld	a5,-64(s0)
 568 025c 2334F4F2 		sd	a5,-216(s0)
  86:src/riscv.cpp ****                 arg = (void*)arg4;
 569              		.loc 1 86 17 is_stmt 1
  86:src/riscv.cpp ****                 arg = (void*)arg4;
 570              		.loc 1 86 21 is_stmt 0
 571 0260 833784FB 		ld	a5,-72(s0)
 572 0264 2338F4F2 		sd	a5,-208(s0)
  89:src/riscv.cpp ****                 *tcb = TCB::createThread(body, (void*)arg, DEFAULT_TIME_SLICE);
 573              		.loc 1 89 17 is_stmt 1
  89:src/riscv.cpp ****                 *tcb = TCB::createThread(body, (void*)arg, DEFAULT_TIME_SLICE);
 574              		.loc 1 89 41 is_stmt 0
 575 0268 033584F2 		ld	a0,-216(s0)
 576 026c 833504F3 		ld	a1,-208(s0)
  89:src/riscv.cpp ****                 *tcb = TCB::createThread(body, (void*)arg, DEFAULT_TIME_SLICE);
 577              		.loc 1 89 18
 578 0270 833404F2 		ld	s1,-224(s0)
  89:src/riscv.cpp ****                 *tcb = TCB::createThread(body, (void*)arg, DEFAULT_TIME_SLICE);
 579              		.loc 1 89 41
 580 0274 13062000 		li	a2,2
 581 0278 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_m@plt
 581      E7800000 
 582              	.LVL18:
  89:src/riscv.cpp ****                 *tcb = TCB::createThread(body, (void*)arg, DEFAULT_TIME_SLICE);
 583              		.loc 1 89 22
 584 0280 23B0A400 		sd	a0,0(s1)
  92:src/riscv.cpp ****                 if (tcb)
 585              		.loc 1 92 17 is_stmt 1
  92:src/riscv.cpp ****                 if (tcb)
 586              		.loc 1 92 21 is_stmt 0
 587 0284 833704F2 		ld	a5,-224(s0)
  92:src/riscv.cpp ****                 if (tcb)
 588              		.loc 1 92 17
 589 0288 63860700 		beqz	a5,.L26
  93:src/riscv.cpp ****                     __asm__ volatile ("li a0, 0");
 590              		.loc 1 93 21 is_stmt 1
  93:src/riscv.cpp ****                     __asm__ volatile ("li a0, 0");
 591              		.loc 1 93 50 is_stmt 0
 592              	#APP
GAS LISTING /tmp/ccXmE4MK.s 			page 21


 593              	# 93 "src/riscv.cpp" 1
 594              		li a0, 0
 595              	# 0 "" 2
 596              	#NO_APP
 597 0290 6FF05FF7 		j	.L9
 598              	.L26:
  95:src/riscv.cpp ****                     __asm__ volatile ("li a0, -1");
 599              		.loc 1 95 21 is_stmt 1
  95:src/riscv.cpp ****                     __asm__ volatile ("li a0, -1");
 600              		.loc 1 95 51 is_stmt 0
 601              	#APP
 602              	# 95 "src/riscv.cpp" 1
 603              		li a0, -1
 604              	# 0 "" 2
 605              	#NO_APP
 606 0298 6FF0DFF6 		j	.L9
 607              	.L22:
 100:src/riscv.cpp ****             case SYSCALLS::THREAD_EXIT:
 608              		.loc 1 100 13 is_stmt 1
 101:src/riscv.cpp ****                 TCB::running->setFinished(true);
 609              		.loc 1 101 17
 101:src/riscv.cpp ****                 TCB::running->setFinished(true);
 610              		.loc 1 101 42 is_stmt 0
 611 029c 97070000 		la	a5,_ZN3TCB7runningE
 611      83B70700 
 612 02a4 83B70700 		ld	a5,0(a5)
 613              	.LVL19:
 614              	.LBB120:
 615              	.LBB121:
 616              		.file 3 "src/../h/../h/tcb.hpp"
   1:src/../h/../h/tcb.hpp **** #ifndef TCP_HPP
   2:src/../h/../h/tcb.hpp **** #define TCP_HPP
   3:src/../h/../h/tcb.hpp **** 
   4:src/../h/../h/tcb.hpp **** #include "../lib/hw.h"
   5:src/../h/../h/tcb.hpp **** #include "../h/scheduler.hpp"
   6:src/../h/../h/tcb.hpp **** #include "../h/riscv.hpp"
   7:src/../h/../h/tcb.hpp **** #include "../h/memory_allocator.hpp"
   8:src/../h/../h/tcb.hpp **** 
   9:src/../h/../h/tcb.hpp **** // Thread Control Block
  10:src/../h/../h/tcb.hpp **** class TCB
  11:src/../h/../h/tcb.hpp **** {
  12:src/../h/../h/tcb.hpp **** private:
  13:src/../h/../h/tcb.hpp ****     using Body = void (*)(void*);
  14:src/../h/../h/tcb.hpp ****     Body body;
  15:src/../h/../h/tcb.hpp ****     uint64* stack;
  16:src/../h/../h/tcb.hpp **** 
  17:src/../h/../h/tcb.hpp ****     // Thread context struct
  18:src/../h/../h/tcb.hpp ****     struct Context {
  19:src/../h/../h/tcb.hpp ****         uint64 ra; // Return address
  20:src/../h/../h/tcb.hpp ****         uint64 sp; // Stack pointer
  21:src/../h/../h/tcb.hpp ****     };
  22:src/../h/../h/tcb.hpp **** 
  23:src/../h/../h/tcb.hpp ****     // Thread context
  24:src/../h/../h/tcb.hpp ****     Context context;
  25:src/../h/../h/tcb.hpp ****     bool finished;
  26:src/../h/../h/tcb.hpp ****     bool blocked;
  27:src/../h/../h/tcb.hpp ****     uint64 timeSlice;
GAS LISTING /tmp/ccXmE4MK.s 			page 22


  28:src/../h/../h/tcb.hpp ****     time_t sleepingTime;
  29:src/../h/../h/tcb.hpp ****     bool sleep;
  30:src/../h/../h/tcb.hpp ****     void* arg;
  31:src/../h/../h/tcb.hpp **** 
  32:src/../h/../h/tcb.hpp ****     static void contextSwitch(Context* oldContext, Context* newContext);
  33:src/../h/../h/tcb.hpp **** 
  34:src/../h/../h/tcb.hpp ****     TCB(Body body, void* arg, uint64 timeSlice) :
  35:src/../h/../h/tcb.hpp ****             body(body),
  36:src/../h/../h/tcb.hpp ****             stack(body ? (uint64*)MemoryAllocator::mem_alloc(sizeof(uint64) * DEFAULT_STACK_SIZE) :
  37:src/../h/../h/tcb.hpp ****             context({(uint64)&threadWrapper, stack ? (uint64)&stack[DEFAULT_STACK_SIZE] : 0}),
  38:src/../h/../h/tcb.hpp ****             finished(false),
  39:src/../h/../h/tcb.hpp ****             blocked(false),
  40:src/../h/../h/tcb.hpp ****             timeSlice(timeSlice),
  41:src/../h/../h/tcb.hpp ****             sleepingTime(0),
  42:src/../h/../h/tcb.hpp ****             sleep(false),
  43:src/../h/../h/tcb.hpp ****             arg(arg)
  44:src/../h/../h/tcb.hpp ****     { if (body) Scheduler::put(this); }
  45:src/../h/../h/tcb.hpp **** 
  46:src/../h/../h/tcb.hpp **** public:
  47:src/../h/../h/tcb.hpp **** 
  48:src/../h/../h/tcb.hpp ****     void* operator new(size_t size) {
  49:src/../h/../h/tcb.hpp ****         return MemoryAllocator::mem_alloc(size);
  50:src/../h/../h/tcb.hpp ****     }
  51:src/../h/../h/tcb.hpp **** 
  52:src/../h/../h/tcb.hpp ****     void* operator new[] (size_t size) {
  53:src/../h/../h/tcb.hpp ****         return MemoryAllocator::mem_alloc(size);
  54:src/../h/../h/tcb.hpp ****     }
  55:src/../h/../h/tcb.hpp **** 
  56:src/../h/../h/tcb.hpp ****     void operator delete(void* ptr) noexcept {
  57:src/../h/../h/tcb.hpp ****         MemoryAllocator::mem_free(ptr);
  58:src/../h/../h/tcb.hpp ****     }
  59:src/../h/../h/tcb.hpp **** 
  60:src/../h/../h/tcb.hpp ****     void operator delete[] (void* ptr) noexcept {
  61:src/../h/../h/tcb.hpp ****         MemoryAllocator::mem_free(ptr);
  62:src/../h/../h/tcb.hpp ****     }
  63:src/../h/../h/tcb.hpp **** 
  64:src/../h/../h/tcb.hpp ****     static TCB* createThread(Body body, void* arg, uint64 timeSlice);
  65:src/../h/../h/tcb.hpp **** 
  66:src/../h/../h/tcb.hpp ****     // Getter and setter for finished
  67:src/../h/../h/tcb.hpp ****     bool isFinished() const { return this->finished; }
  68:src/../h/../h/tcb.hpp ****     void setFinished(bool value) { this->finished = value; }
 617              		.loc 3 68 36 is_stmt 1
 618              		.loc 3 68 51 is_stmt 0
 619 02a8 13071000 		li	a4,1
 620 02ac 2380E702 		sb	a4,32(a5)
 621              	.LVL20:
 622              	.LBE121:
 623              	.LBE120:
 102:src/riscv.cpp ****                 thread_dispatch();
 624              		.loc 1 102 17 is_stmt 1
 102:src/riscv.cpp ****                 thread_dispatch();
 625              		.loc 1 102 32 is_stmt 0
 626 02b0 97000000 		call	_Z15thread_dispatchv@plt
 626      E7800000 
 627              	.LVL21:
 103:src/riscv.cpp ****                 __asm__ volatile ("li a0, 0");
 628              		.loc 1 103 17 is_stmt 1
GAS LISTING /tmp/ccXmE4MK.s 			page 23


 103:src/riscv.cpp ****                 __asm__ volatile ("li a0, 0");
 629              		.loc 1 103 46 is_stmt 0
 630              	#APP
 631              	# 103 "src/riscv.cpp" 1
 104:src/riscv.cpp ****                 break;
 632              		li a0, 0
 633              	# 0 "" 2
 634              		.loc 1 104 17 is_stmt 1
 635              	#NO_APP
 636 02bc 6FF09FF4 		j	.L9
 637              	.L21:
 107:src/riscv.cpp ****             case SYSCALLS::THREAD_DISPATCH:
 638              		.loc 1 107 13
 108:src/riscv.cpp ****                 TCB::dispatch();
 639              		.loc 1 108 17
 108:src/riscv.cpp ****                 TCB::dispatch();
 640              		.loc 1 108 30 is_stmt 0
 641 02c0 97000000 		call	_ZN3TCB8dispatchEv@plt
 641      E7800000 
 642              	.LVL22:
 109:src/riscv.cpp ****                 break;
 643              		.loc 1 109 17 is_stmt 1
 644 02c8 6FF0DFF3 		j	.L9
 645              	.L14:
 112:src/riscv.cpp ****             case SYSCALLS::TIME_SLEEP:
 646              		.loc 1 112 13
 113:src/riscv.cpp ****                 time_t volatile time;
 647              		.loc 1 113 17
 114:src/riscv.cpp ****                 time = (time_t)arg2;
 648              		.loc 1 114 17
 114:src/riscv.cpp ****                 time = (time_t)arg2;
 649              		.loc 1 114 22 is_stmt 0
 650 02cc 833784FC 		ld	a5,-56(s0)
 651 02d0 233CF4F2 		sd	a5,-200(s0)
 116:src/riscv.cpp ****                 if (time != 0) {
 652              		.loc 1 116 17 is_stmt 1
 116:src/riscv.cpp ****                 if (time != 0) {
 653              		.loc 1 116 26 is_stmt 0
 654 02d4 833784F3 		ld	a5,-200(s0)
 116:src/riscv.cpp ****                 if (time != 0) {
 655              		.loc 1 116 17
 656 02d8 E38607F2 		beqz	a5,.L9
 117:src/riscv.cpp ****                     TCB::running->setSleepingTime(time);
 657              		.loc 1 117 21 is_stmt 1
 117:src/riscv.cpp ****                     TCB::running->setSleepingTime(time);
 658              		.loc 1 117 50 is_stmt 0
 659 02dc 97070000 		la	a5,_ZN3TCB7runningE
 659      83B70700 
 660 02e4 03B50700 		ld	a0,0(a5)
 661 02e8 833784F3 		ld	a5,-200(s0)
 662              	.LVL23:
 663              	.LBB122:
 664              	.LBB123:
  69:src/../h/../h/tcb.hpp **** 
  70:src/../h/../h/tcb.hpp ****     // Getter and setter for blocked
  71:src/../h/../h/tcb.hpp ****     bool isBlocked() const { return this->blocked; }
  72:src/../h/../h/tcb.hpp ****     void setBlocked(bool value) { this->blocked = value; }
GAS LISTING /tmp/ccXmE4MK.s 			page 24


  73:src/../h/../h/tcb.hpp **** 
  74:src/../h/../h/tcb.hpp ****     // Getter for time slice
  75:src/../h/../h/tcb.hpp ****     uint64 getTimeSlice() const { return this->timeSlice; }
  76:src/../h/../h/tcb.hpp ****     static uint64 timeSliceCounter;
  77:src/../h/../h/tcb.hpp **** 
  78:src/../h/../h/tcb.hpp ****     // Sleeping getters and setters
  79:src/../h/../h/tcb.hpp ****     void setSleepingTime(time_t time) { this->sleepingTime = time; }
 665              		.loc 3 79 41 is_stmt 1
 666              		.loc 3 79 60 is_stmt 0
 667 02ec 2338F502 		sd	a5,48(a0)
 668              	.LVL24:
 669              	.LBE123:
 670              	.LBE122:
 118:src/riscv.cpp ****                     TCB::running->setSleep(true);
 671              		.loc 1 118 21 is_stmt 1
 672              	.LBB124:
 673              	.LBB125:
  80:src/../h/../h/tcb.hpp ****     time_t getSleepingTime() const { return this->sleepingTime; }
  81:src/../h/../h/tcb.hpp **** 
  82:src/../h/../h/tcb.hpp ****     void setSleep(bool val) { this->sleep = val; }
 674              		.loc 3 82 31
 675              		.loc 3 82 43 is_stmt 0
 676 02f0 93071000 		li	a5,1
 677 02f4 230CF502 		sb	a5,56(a0)
 678              	.LVL25:
 679              	.LBE125:
 680              	.LBE124:
 120:src/riscv.cpp ****                     WaitList::add(TCB::running);
 681              		.loc 1 120 21 is_stmt 1
 120:src/riscv.cpp ****                     WaitList::add(TCB::running);
 682              		.loc 1 120 34 is_stmt 0
 683 02f8 97000000 		call	_ZN8WaitList3addEP3TCB@plt
 683      E7800000 
 684              	.LVL26:
 121:src/riscv.cpp ****                     thread_dispatch();
 685              		.loc 1 121 21 is_stmt 1
 121:src/riscv.cpp ****                     thread_dispatch();
 686              		.loc 1 121 36 is_stmt 0
 687 0300 97000000 		call	_Z15thread_dispatchv@plt
 687      E7800000 
 688              	.LVL27:
 689 0308 6FF0DFEF 		j	.L9
 690              	.L20:
 127:src/riscv.cpp ****             case SYSCALLS::SEM_OPEN:
 691              		.loc 1 127 13 is_stmt 1
 128:src/riscv.cpp ****                 sem_t* volatile handleT;
 692              		.loc 1 128 17
 129:src/riscv.cpp ****                 unsigned volatile init;
 693              		.loc 1 129 17
 131:src/riscv.cpp ****                 handleT = (sem_t*)arg2;
 694              		.loc 1 131 17
 131:src/riscv.cpp ****                 handleT = (sem_t*)arg2;
 695              		.loc 1 131 25 is_stmt 0
 696 030c 833784FC 		ld	a5,-56(s0)
 697 0310 2330F4F4 		sd	a5,-192(s0)
 132:src/riscv.cpp ****                 init = (int)arg3;
 698              		.loc 1 132 17 is_stmt 1
GAS LISTING /tmp/ccXmE4MK.s 			page 25


 132:src/riscv.cpp ****                 init = (int)arg3;
 699              		.loc 1 132 24 is_stmt 0
 700 0314 833704FC 		ld	a5,-64(s0)
 701 0318 9B870700 		sext.w	a5,a5
 132:src/riscv.cpp ****                 init = (int)arg3;
 702              		.loc 1 132 22
 703 031c 2322F4EE 		sw	a5,-284(s0)
 134:src/riscv.cpp ****                 *handleT = _Semaphore::createSemaphore(init);
 704              		.loc 1 134 17 is_stmt 1
 134:src/riscv.cpp ****                 *handleT = _Semaphore::createSemaphore(init);
 705              		.loc 1 134 55 is_stmt 0
 706 0320 832444EE 		lw	s1,-284(s0)
 707 0324 9B840400 		sext.w	s1,s1
 134:src/riscv.cpp ****                 *handleT = _Semaphore::createSemaphore(init);
 708              		.loc 1 134 18
 709 0328 033904F4 		ld	s2,-192(s0)
 710              	.LVL28:
 711              	.LBE133:
 712              	.LBE139:
 713              	.LBE141:
 714              	.LBE147:
 715              		.file 4 "src/../h/../h/semaphore.hpp"
   1:src/../h/../h/semaphore.hpp **** #ifndef SEMAPHORE_HPP
   2:src/../h/../h/semaphore.hpp **** #define SEMAPHORE_HPP
   3:src/../h/../h/semaphore.hpp **** 
   4:src/../h/../h/semaphore.hpp **** #include "../h/list.hpp"
   5:src/../h/../h/semaphore.hpp **** #include "../h/tcb.hpp"
   6:src/../h/../h/semaphore.hpp **** #include "../h/memory_allocator.hpp"
   7:src/../h/../h/semaphore.hpp **** #include "../h/wait_list.hpp"
   8:src/../h/../h/semaphore.hpp **** 
   9:src/../h/../h/semaphore.hpp **** class _Semaphore
  10:src/../h/../h/semaphore.hpp **** {
  11:src/../h/../h/semaphore.hpp **** private:
  12:src/../h/../h/semaphore.hpp ****     int value;
  13:src/../h/../h/semaphore.hpp ****     // Blocked threads
  14:src/../h/../h/semaphore.hpp ****     List <TCB> blocked;
  15:src/../h/../h/semaphore.hpp ****     bool closed;
  16:src/../h/../h/semaphore.hpp **** 
  17:src/../h/../h/semaphore.hpp **** public:
  18:src/../h/../h/semaphore.hpp ****     void* operator new(size_t size) {
  19:src/../h/../h/semaphore.hpp ****         return MemoryAllocator::mem_alloc(size);
  20:src/../h/../h/semaphore.hpp ****     }
  21:src/../h/../h/semaphore.hpp **** 
  22:src/../h/../h/semaphore.hpp ****     void* operator new[] (size_t size) {
  23:src/../h/../h/semaphore.hpp ****         return MemoryAllocator::mem_alloc(size);
  24:src/../h/../h/semaphore.hpp ****     }
  25:src/../h/../h/semaphore.hpp **** 
  26:src/../h/../h/semaphore.hpp ****     void operator delete(void* ptr) noexcept {
  27:src/../h/../h/semaphore.hpp ****         MemoryAllocator::mem_free(ptr);
  28:src/../h/../h/semaphore.hpp ****     }
  29:src/../h/../h/semaphore.hpp **** 
  30:src/../h/../h/semaphore.hpp ****     void operator delete[] (void* ptr) noexcept {
  31:src/../h/../h/semaphore.hpp ****         MemoryAllocator::mem_free(ptr);
  32:src/../h/../h/semaphore.hpp ****     }
  33:src/../h/../h/semaphore.hpp **** 
  34:src/../h/../h/semaphore.hpp ****     explicit _Semaphore(int value = 1) : value(value), closed(false) {}
  35:src/../h/../h/semaphore.hpp ****     static _Semaphore* createSemaphore(int value = 1) { return new _Semaphore(value); }
GAS LISTING /tmp/ccXmE4MK.s 			page 26


 716              		.loc 4 35 57 is_stmt 1
 717              	.LBB148:
 718              	.LBB142:
 719              	.LBB140:
 720              	.LBB134:
 721              	.LBB126:
 722              	.LBB127:
 723              	.LBB128:
  19:src/../h/../h/semaphore.hpp ****     }
 724              		.loc 4 19 9
  19:src/../h/../h/semaphore.hpp ****     }
 725              		.loc 4 19 42 is_stmt 0
 726 032c 13050002 		li	a0,32
 727 0330 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
 727      E7800000 
 728              	.LVL29:
 729              	.LBE128:
 730              	.LBE127:
 731              	.LBB129:
 732              	.LBB130:
  34:src/../h/../h/semaphore.hpp ****     static _Semaphore* createSemaphore(int value = 1) { return new _Semaphore(value); }
 733              		.loc 4 34 68
 734 0338 23209500 		sw	s1,0(a0)
 735              	.LVL30:
 736              	.LBB131:
 737              	.LBB132:
 738              		.file 5 "src/../h/../h/../h/list.hpp"
   1:src/../h/../h/../h/list.hpp **** #ifndef LIST_HPP
   2:src/../h/../h/../h/list.hpp **** #define LIST_HPP
   3:src/../h/../h/../h/list.hpp **** 
   4:src/../h/../h/../h/list.hpp **** #include "../h/memory_allocator.hpp"
   5:src/../h/../h/../h/list.hpp **** 
   6:src/../h/../h/../h/list.hpp **** template<typename T>
   7:src/../h/../h/../h/list.hpp **** class List {
   8:src/../h/../h/../h/list.hpp **** private:
   9:src/../h/../h/../h/list.hpp ****     struct Elem {
  10:src/../h/../h/../h/list.hpp ****         T *data;
  11:src/../h/../h/../h/list.hpp ****         Elem *next;
  12:src/../h/../h/../h/list.hpp **** 
  13:src/../h/../h/../h/list.hpp ****         Elem(T *data, Elem *next) : data(data), next(next) {}
  14:src/../h/../h/../h/list.hpp **** 
  15:src/../h/../h/../h/list.hpp ****         void* operator new(size_t size) {
  16:src/../h/../h/../h/list.hpp ****             return MemoryAllocator::mem_alloc(size);
  17:src/../h/../h/../h/list.hpp ****         }
  18:src/../h/../h/../h/list.hpp **** 
  19:src/../h/../h/../h/list.hpp ****         void* operator new[] (size_t size) {
  20:src/../h/../h/../h/list.hpp ****             return MemoryAllocator::mem_alloc(size);
  21:src/../h/../h/../h/list.hpp ****         }
  22:src/../h/../h/../h/list.hpp **** 
  23:src/../h/../h/../h/list.hpp ****         void operator delete(void* ptr) noexcept {
  24:src/../h/../h/../h/list.hpp ****             MemoryAllocator::mem_free(ptr);
  25:src/../h/../h/../h/list.hpp ****         }
  26:src/../h/../h/../h/list.hpp **** 
  27:src/../h/../h/../h/list.hpp ****         void operator delete[] (void* ptr) noexcept {
  28:src/../h/../h/../h/list.hpp ****             MemoryAllocator::mem_free(ptr);
  29:src/../h/../h/../h/list.hpp ****         }
  30:src/../h/../h/../h/list.hpp ****     };
GAS LISTING /tmp/ccXmE4MK.s 			page 27


  31:src/../h/../h/../h/list.hpp **** 
  32:src/../h/../h/../h/list.hpp ****     Elem *head, *tail;
  33:src/../h/../h/../h/list.hpp **** 
  34:src/../h/../h/../h/list.hpp **** public:
  35:src/../h/../h/../h/list.hpp ****     List() : head(0), tail(0) {}
 739              		.loc 5 35 29
 740 033c 23340500 		sd	zero,8(a0)
 741 0340 23380500 		sd	zero,16(a0)
 742              	.LVL31:
 743              	.LBE132:
 744              	.LBE131:
  34:src/../h/../h/semaphore.hpp ****     static _Semaphore* createSemaphore(int value = 1) { return new _Semaphore(value); }
 745              		.loc 4 34 68
 746 0344 230C0500 		sb	zero,24(a0)
 747              	.LVL32:
 748              	.LBE130:
 749              	.LBE129:
 750              	.LBE126:
 134:src/riscv.cpp ****                 *handleT = _Semaphore::createSemaphore(init);
 751              		.loc 1 134 26
 752 0348 2330A900 		sd	a0,0(s2)
 136:src/riscv.cpp ****                 if (*handleT)
 753              		.loc 1 136 17 is_stmt 1
 136:src/riscv.cpp ****                 if (*handleT)
 754              		.loc 1 136 22 is_stmt 0
 755 034c 833704F4 		ld	a5,-192(s0)
 136:src/riscv.cpp ****                 if (*handleT)
 756              		.loc 1 136 21
 757 0350 83B70700 		ld	a5,0(a5)
 136:src/riscv.cpp ****                 if (*handleT)
 758              		.loc 1 136 17
 759 0354 63880700 		beqz	a5,.L27
 137:src/riscv.cpp ****                     __asm__ volatile ("mv a0, %0" : : "r" (0));
 760              		.loc 1 137 21 is_stmt 1
 137:src/riscv.cpp ****                     __asm__ volatile ("mv a0, %0" : : "r" (0));
 761              		.loc 1 137 63 is_stmt 0
 762 0358 93070000 		li	a5,0
 763              	#APP
 764              	# 137 "src/riscv.cpp" 1
 765              		mv a0, a5
 766              	# 0 "" 2
 767              	#NO_APP
 768 0360 6FF05FEA 		j	.L9
 769              	.L27:
 139:src/riscv.cpp ****                     __asm__ volatile ("mv a0, %0" : : "r" (-1));
 770              		.loc 1 139 21 is_stmt 1
 139:src/riscv.cpp ****                     __asm__ volatile ("mv a0, %0" : : "r" (-1));
 771              		.loc 1 139 64 is_stmt 0
 772 0364 9307F0FF 		li	a5,-1
 773              	#APP
 774              	# 139 "src/riscv.cpp" 1
 775              		mv a0, a5
 776              	# 0 "" 2
 777              	#NO_APP
 778 036c 6FF09FE9 		j	.L9
 779              	.L19:
 144:src/riscv.cpp ****             case SYSCALLS::SEM_CLOSE:
GAS LISTING /tmp/ccXmE4MK.s 			page 28


 780              		.loc 1 144 13 is_stmt 1
 145:src/riscv.cpp ****                 handle = (sem_t)arg2;
 781              		.loc 1 145 17
 145:src/riscv.cpp ****                 handle = (sem_t)arg2;
 782              		.loc 1 145 24 is_stmt 0
 783 0370 833784FC 		ld	a5,-56(s0)
 784 0374 233CF4EE 		sd	a5,-264(s0)
 146:src/riscv.cpp ****                 ret = handle->close();
 785              		.loc 1 146 17 is_stmt 1
 146:src/riscv.cpp ****                 ret = handle->close();
 786              		.loc 1 146 36 is_stmt 0
 787 0378 033584EF 		ld	a0,-264(s0)
 788 037c 97000000 		call	_ZN10_Semaphore5closeEv@plt
 788      E7800000 
 789              	.LVL33:
 146:src/riscv.cpp ****                 ret = handle->close();
 790              		.loc 1 146 21
 791 0384 232EA4EC 		sw	a0,-292(s0)
 148:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %[r]" : : [r] "r" (ret));
 792              		.loc 1 148 17 is_stmt 1
 148:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %[r]" : : [r] "r" (ret));
 793              		.loc 1 148 62 is_stmt 0
 794 0388 8327C4ED 		lw	a5,-292(s0)
 148:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %[r]" : : [r] "r" (ret));
 795              		.loc 1 148 67
 796              	#APP
 797              	# 148 "src/riscv.cpp" 1
 149:src/riscv.cpp ****                 break;
 798              		mv a0, a5
 799              	# 0 "" 2
 800              		.loc 1 149 17 is_stmt 1
 801              	#NO_APP
 802 0390 6FF05FE7 		j	.L9
 803              	.L18:
 152:src/riscv.cpp ****             case SYSCALLS::SEM_WAIT:
 804              		.loc 1 152 13
 153:src/riscv.cpp ****                 handle = (sem_t)arg2;
 805              		.loc 1 153 17
 153:src/riscv.cpp ****                 handle = (sem_t)arg2;
 806              		.loc 1 153 24 is_stmt 0
 807 0394 833784FC 		ld	a5,-56(s0)
 808 0398 233CF4EE 		sd	a5,-264(s0)
 155:src/riscv.cpp ****                 ret = handle->wait();
 809              		.loc 1 155 17 is_stmt 1
 155:src/riscv.cpp ****                 ret = handle->wait();
 810              		.loc 1 155 35 is_stmt 0
 811 039c 033584EF 		ld	a0,-264(s0)
 812 03a0 97000000 		call	_ZN10_Semaphore4waitEv@plt
 812      E7800000 
 813              	.LVL34:
 155:src/riscv.cpp ****                 ret = handle->wait();
 814              		.loc 1 155 21
 815 03a8 232EA4EC 		sw	a0,-292(s0)
 156:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %[r]" : : [r] "r" (ret));
 816              		.loc 1 156 17 is_stmt 1
 156:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %[r]" : : [r] "r" (ret));
 817              		.loc 1 156 62 is_stmt 0
GAS LISTING /tmp/ccXmE4MK.s 			page 29


 818 03ac 8327C4ED 		lw	a5,-292(s0)
 156:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %[r]" : : [r] "r" (ret));
 819              		.loc 1 156 67
 820              	#APP
 821              	# 156 "src/riscv.cpp" 1
 157:src/riscv.cpp ****                 break;
 822              		mv a0, a5
 823              	# 0 "" 2
 824              		.loc 1 157 17 is_stmt 1
 825              	#NO_APP
 826 03b4 6FF01FE5 		j	.L9
 827              	.L17:
 160:src/riscv.cpp ****             case SYSCALLS::SEM_SIGNAL:
 828              		.loc 1 160 13
 161:src/riscv.cpp ****                 handle = (sem_t)arg2;
 829              		.loc 1 161 17
 161:src/riscv.cpp ****                 handle = (sem_t)arg2;
 830              		.loc 1 161 24 is_stmt 0
 831 03b8 833784FC 		ld	a5,-56(s0)
 832 03bc 233CF4EE 		sd	a5,-264(s0)
 163:src/riscv.cpp ****                 ret = handle->signal();
 833              		.loc 1 163 17 is_stmt 1
 163:src/riscv.cpp ****                 ret = handle->signal();
 834              		.loc 1 163 37 is_stmt 0
 835 03c0 033584EF 		ld	a0,-264(s0)
 836 03c4 97000000 		call	_ZN10_Semaphore6signalEv@plt
 836      E7800000 
 837              	.LVL35:
 163:src/riscv.cpp ****                 ret = handle->signal();
 838              		.loc 1 163 21
 839 03cc 232EA4EC 		sw	a0,-292(s0)
 164:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %[r]" : : [r] "r" (ret));
 840              		.loc 1 164 17 is_stmt 1
 164:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %[r]" : : [r] "r" (ret));
 841              		.loc 1 164 62 is_stmt 0
 842 03d0 8327C4ED 		lw	a5,-292(s0)
 164:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %[r]" : : [r] "r" (ret));
 843              		.loc 1 164 67
 844              	#APP
 845              	# 164 "src/riscv.cpp" 1
 165:src/riscv.cpp ****                 break;
 846              		mv a0, a5
 847              	# 0 "" 2
 848              		.loc 1 165 17 is_stmt 1
 849              	#NO_APP
 850 03d8 6FF0DFE2 		j	.L9
 851              	.L15:
 168:src/riscv.cpp ****             case SYSCALLS::SEM_TRYWAIT:
 852              		.loc 1 168 13
 169:src/riscv.cpp ****                 handle = (sem_t)arg2;
 853              		.loc 1 169 17
 169:src/riscv.cpp ****                 handle = (sem_t)arg2;
 854              		.loc 1 169 24 is_stmt 0
 855 03dc 833784FC 		ld	a5,-56(s0)
 856 03e0 233CF4EE 		sd	a5,-264(s0)
 171:src/riscv.cpp ****                 ret = handle->tryWait();
 857              		.loc 1 171 17 is_stmt 1
GAS LISTING /tmp/ccXmE4MK.s 			page 30


 171:src/riscv.cpp ****                 ret = handle->tryWait();
 858              		.loc 1 171 38 is_stmt 0
 859 03e4 033584EF 		ld	a0,-264(s0)
 860 03e8 97000000 		call	_ZN10_Semaphore7tryWaitEv@plt
 860      E7800000 
 861              	.LVL36:
 171:src/riscv.cpp ****                 ret = handle->tryWait();
 862              		.loc 1 171 21
 863 03f0 232EA4EC 		sw	a0,-292(s0)
 173:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %[r]" : : [r] "r" (ret));
 864              		.loc 1 173 17 is_stmt 1
 173:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %[r]" : : [r] "r" (ret));
 865              		.loc 1 173 62 is_stmt 0
 866 03f4 8327C4ED 		lw	a5,-292(s0)
 173:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %[r]" : : [r] "r" (ret));
 867              		.loc 1 173 67
 868              	#APP
 869              	# 173 "src/riscv.cpp" 1
 175:src/riscv.cpp ****                 break;
 870              		mv a0, a5
 871              	# 0 "" 2
 872              		.loc 1 175 17 is_stmt 1
 873              	#NO_APP
 874 03fc 6FF09FE0 		j	.L9
 875              	.L16:
 178:src/riscv.cpp ****             case SYSCALLS::SEM_TIMEDWAIT:
 876              		.loc 1 178 13
 179:src/riscv.cpp ****                 handle = (sem_t)arg2;
 877              		.loc 1 179 17
 179:src/riscv.cpp ****                 handle = (sem_t)arg2;
 878              		.loc 1 179 24 is_stmt 0
 879 0400 833784FC 		ld	a5,-56(s0)
 880 0404 233CF4EE 		sd	a5,-264(s0)
 180:src/riscv.cpp ****                 time_t volatile timeout;
 881              		.loc 1 180 17 is_stmt 1
 181:src/riscv.cpp ****                 timeout = (time_t)arg3;
 882              		.loc 1 181 17
 181:src/riscv.cpp ****                 timeout = (time_t)arg3;
 883              		.loc 1 181 25 is_stmt 0
 884 0408 833704FC 		ld	a5,-64(s0)
 885 040c 2334F4F4 		sd	a5,-184(s0)
 183:src/riscv.cpp ****                 ret = handle->timedwait(timeout);
 886              		.loc 1 183 17 is_stmt 1
 183:src/riscv.cpp ****                 ret = handle->timedwait(timeout);
 887              		.loc 1 183 40 is_stmt 0
 888 0410 033584EF 		ld	a0,-264(s0)
 889 0414 833584F4 		ld	a1,-184(s0)
 890 0418 97000000 		call	_ZN10_Semaphore9timedwaitEm@plt
 890      E7800000 
 891              	.LVL37:
 183:src/riscv.cpp ****                 ret = handle->timedwait(timeout);
 892              		.loc 1 183 21
 893 0420 232EA4EC 		sw	a0,-292(s0)
 184:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %[r]" : : [r] "r" (ret));
 894              		.loc 1 184 17 is_stmt 1
 184:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %[r]" : : [r] "r" (ret));
 895              		.loc 1 184 62 is_stmt 0
GAS LISTING /tmp/ccXmE4MK.s 			page 31


 896 0424 8327C4ED 		lw	a5,-292(s0)
 184:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %[r]" : : [r] "r" (ret));
 897              		.loc 1 184 67
 898              	#APP
 899              	# 184 "src/riscv.cpp" 1
 186:src/riscv.cpp ****                 break;
 900              		mv a0, a5
 901              	# 0 "" 2
 902              		.loc 1 186 17 is_stmt 1
 903              	#NO_APP
 904 042c 6FF09FDD 		j	.L9
 905              	.L13:
 189:src/riscv.cpp ****             case SYSCALLS::GETC:
 906              		.loc 1 189 13
 190:src/riscv.cpp ****                 ret = _Console::GETC();
 907              		.loc 1 190 17
 190:src/riscv.cpp ****                 ret = _Console::GETC();
 908              		.loc 1 190 37 is_stmt 0
 909 0430 97000000 		call	_ZN8_Console4GETCEv@plt
 909      E7800000 
 910              	.LVL38:
 911 0438 1B050500 		sext.w	a0,a0
 190:src/riscv.cpp ****                 ret = _Console::GETC();
 912              		.loc 1 190 21
 913 043c 232EA4EC 		sw	a0,-292(s0)
 192:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %[r]" : : [r] "r" (ret));
 914              		.loc 1 192 17 is_stmt 1
 192:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %[r]" : : [r] "r" (ret));
 915              		.loc 1 192 62 is_stmt 0
 916 0440 8327C4ED 		lw	a5,-292(s0)
 192:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %[r]" : : [r] "r" (ret));
 917              		.loc 1 192 67
 918              	#APP
 919              	# 192 "src/riscv.cpp" 1
 193:src/riscv.cpp ****                 break;
 920              		mv a0, a5
 921              	# 0 "" 2
 922              		.loc 1 193 17 is_stmt 1
 923              	#NO_APP
 924 0448 6FF0DFDB 		j	.L9
 925              	.L12:
 196:src/riscv.cpp ****             case SYSCALLS::PUTC:
 926              		.loc 1 196 13
 197:src/riscv.cpp ****                 char volatile c;
 927              		.loc 1 197 17
 198:src/riscv.cpp ****                 c = (char)arg2;
 928              		.loc 1 198 17
 198:src/riscv.cpp ****                 c = (char)arg2;
 929              		.loc 1 198 19 is_stmt 0
 930 044c 833784FC 		ld	a5,-56(s0)
 931 0450 93F7F70F 		andi	a5,a5,0xff
 932 0454 A30DF4EC 		sb	a5,-293(s0)
 199:src/riscv.cpp ****                 _Console::PUTC(c);
 933              		.loc 1 199 17 is_stmt 1
 199:src/riscv.cpp ****                 _Console::PUTC(c);
 934              		.loc 1 199 31 is_stmt 0
 935 0458 0345B4ED 		lbu	a0,-293(s0)
GAS LISTING /tmp/ccXmE4MK.s 			page 32


 936 045c 1375F50F 		andi	a0,a0,0xff
 937 0460 97000000 		call	_ZN8_Console4PUTCEc@plt
 937      E7800000 
 938              	.LVL39:
 201:src/riscv.cpp ****                 break;
 939              		.loc 1 201 17 is_stmt 1
 940 0468 6FF0DFD9 		j	.L9
 941              	.L10:
 203:src/riscv.cpp ****             case SYSCALLS::PUTC_HANDLER:
 942              		.loc 1 203 13
 204:src/riscv.cpp ****                 _Console::putcHandler();
 943              		.loc 1 204 17
 204:src/riscv.cpp ****                 _Console::putcHandler();
 944              		.loc 1 204 38 is_stmt 0
 945 046c 97000000 		call	_ZN8_Console11putcHandlerEv@plt
 945      E7800000 
 946              	.LVL40:
 205:src/riscv.cpp ****                 break;
 947              		.loc 1 205 17 is_stmt 1
 948 0474 6FF01FD9 		j	.L9
 949              	.L33:
 950              	.LBE134:
 951              	.LBE140:
 952              	.LBE142:
 953              	.LBB143:
 954              	.LBB102:
 212:src/riscv.cpp ****         uint64 volatile sepc = r_sepc();
 955              		.loc 1 212 9
 956              	.LBB103:
 957              	.LBB104:
 110:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 958              		.loc 2 110 5
 111:src/../h/riscv.hpp ****     return sepc;
 959              		.loc 2 111 5
 111:src/../h/riscv.hpp ****     return sepc;
 960              		.loc 2 111 64 is_stmt 0
 961              	#APP
 962              	# 111 "src/../h/riscv.hpp" 1
 963              		csrr a5, sepc
 964              	# 0 "" 2
 965              	#NO_APP
 966 047c 2338F4F8 		sd	a5,-112(s0)
 112:src/../h/riscv.hpp **** }
 967              		.loc 2 112 5 is_stmt 1
 112:src/../h/riscv.hpp **** }
 968              		.loc 2 112 12 is_stmt 0
 969 0480 833704F9 		ld	a5,-112(s0)
 970              	.LBE104:
 971              	.LBE103:
 212:src/riscv.cpp ****         uint64 volatile sepc = r_sepc();
 972              		.loc 1 212 39
 973 0484 2338F4F4 		sd	a5,-176(s0)
 213:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 974              		.loc 1 213 9 is_stmt 1
 975              	.LBB105:
 976              	.LBB106:
 178:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
GAS LISTING /tmp/ccXmE4MK.s 			page 33


 977              		.loc 2 178 5
 179:src/../h/riscv.hpp ****     return sstatus;
 978              		.loc 2 179 5
 179:src/../h/riscv.hpp ****     return sstatus;
 979              		.loc 2 179 76 is_stmt 0
 980              	#APP
 981              	# 179 "src/../h/riscv.hpp" 1
 982              		csrr a5, sstatus
 983              	# 0 "" 2
 984              	#NO_APP
 985 048c 2334F4F8 		sd	a5,-120(s0)
 180:src/../h/riscv.hpp **** }
 986              		.loc 2 180 5 is_stmt 1
 180:src/../h/riscv.hpp **** }
 987              		.loc 2 180 12 is_stmt 0
 988 0490 833784F8 		ld	a5,-120(s0)
 989              	.LBE106:
 990              	.LBE105:
 213:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 991              		.loc 1 213 45
 992 0494 233CF4F4 		sd	a5,-168(s0)
 215:src/riscv.cpp ****         _Console::console_handler();
 993              		.loc 1 215 9 is_stmt 1
 215:src/riscv.cpp ****         _Console::console_handler();
 994              		.loc 1 215 34 is_stmt 0
 995 0498 97000000 		call	_ZN8_Console15console_handlerEv@plt
 995      E7800000 
 996              	.LVL41:
 216:src/riscv.cpp ****         __asm__ volatile ("mv a0, %[r]" : : [r] "r" (arg1));
 997              		.loc 1 216 9 is_stmt 1
 216:src/riscv.cpp ****         __asm__ volatile ("mv a0, %[r]" : : [r] "r" (arg1));
 998              		.loc 1 216 54 is_stmt 0
 999 04a0 833704FD 		ld	a5,-48(s0)
 216:src/riscv.cpp ****         __asm__ volatile ("mv a0, %[r]" : : [r] "r" (arg1));
 1000              		.loc 1 216 60
 1001              	#APP
 1002              	# 216 "src/riscv.cpp" 1
 217:src/riscv.cpp ****         w_sepc(sepc);
 1003              		mv a0, a5
 1004              	# 0 "" 2
 1005              		.loc 1 217 9 is_stmt 1
 217:src/riscv.cpp ****         w_sepc(sepc);
 1006              		.loc 1 217 15 is_stmt 0
 1007              	#NO_APP
 1008 04a8 833704F5 		ld	a5,-176(s0)
 1009              	.LVL42:
 1010              	.LBB107:
 1011              	.LBB108:
 117:src/../h/riscv.hpp **** }
 1012              		.loc 2 117 5 is_stmt 1
 117:src/../h/riscv.hpp **** }
 1013              		.loc 2 117 65 is_stmt 0
 1014              	#APP
 1015              	# 117 "src/../h/riscv.hpp" 1
 1016              		csrw sepc, a5
 1017              	# 0 "" 2
 1018              	.LVL43:
GAS LISTING /tmp/ccXmE4MK.s 			page 34


 1019              	#NO_APP
 1020              	.LBE108:
 1021              	.LBE107:
 218:src/riscv.cpp ****         w_sstatus(sstatus);
 1022              		.loc 1 218 9 is_stmt 1
 218:src/riscv.cpp ****         w_sstatus(sstatus);
 1023              		.loc 1 218 18 is_stmt 0
 1024 04b0 833784F5 		ld	a5,-168(s0)
 1025              	.LVL44:
 1026              	.LBB109:
 1027              	.LBB110:
 185:src/../h/riscv.hpp **** }
 1028              		.loc 2 185 5 is_stmt 1
 185:src/../h/riscv.hpp **** }
 1029              		.loc 2 185 77 is_stmt 0
 1030              	#APP
 1031              	# 185 "src/../h/riscv.hpp" 1
 1032              		csrw sstatus, a5
 1033              	# 0 "" 2
 1034              		.loc 2 186 1
 1035              	#NO_APP
 1036 04b8 6FF0DFD5 		j	.L5
 1037              	.LVL45:
 1038              	.L34:
 1039              	.LBE110:
 1040              	.LBE109:
 1041              	.LBE102:
 1042              	.LBB111:
 1043              	.LBB89:
 221:src/riscv.cpp ****         Riscv::mc_sip(SIP_SSIP);
 1044              		.loc 1 221 9 is_stmt 1
 1045              	.LBB90:
 1046              	.LBB91:
 151:src/../h/riscv.hpp **** }
 1047              		.loc 2 151 5
 151:src/../h/riscv.hpp **** }
 1048              		.loc 2 151 64 is_stmt 0
 1049 04bc 93072000 		li	a5,2
 1050              	#APP
 1051              	# 151 "src/../h/riscv.hpp" 1
 1052              		csrc sip, a5
 1053              	# 0 "" 2
 1054              	.LVL46:
 1055              	#NO_APP
 1056              	.LBE91:
 1057              	.LBE90:
 222:src/riscv.cpp ****         uint64 volatile sepc = r_sepc();
 1058              		.loc 1 222 9 is_stmt 1
 1059              	.LBB92:
 1060              	.LBB93:
 110:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 1061              		.loc 2 110 5
 111:src/../h/riscv.hpp ****     return sepc;
 1062              		.loc 2 111 5
 111:src/../h/riscv.hpp ****     return sepc;
 1063              		.loc 2 111 64 is_stmt 0
 1064              	#APP
GAS LISTING /tmp/ccXmE4MK.s 			page 35


 1065              	# 111 "src/../h/riscv.hpp" 1
 1066              		csrr a5, sepc
 1067              	# 0 "" 2
 1068              	#NO_APP
 1069 04c8 2330F4FA 		sd	a5,-96(s0)
 112:src/../h/riscv.hpp **** }
 1070              		.loc 2 112 5 is_stmt 1
 112:src/../h/riscv.hpp **** }
 1071              		.loc 2 112 12 is_stmt 0
 1072 04cc 833704FA 		ld	a5,-96(s0)
 1073              	.LBE93:
 1074              	.LBE92:
 222:src/riscv.cpp ****         uint64 volatile sepc = r_sepc();
 1075              		.loc 1 222 39
 1076 04d0 2330F4F6 		sd	a5,-160(s0)
 223:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 1077              		.loc 1 223 9 is_stmt 1
 1078              	.LBB94:
 1079              	.LBB95:
 178:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 1080              		.loc 2 178 5
 179:src/../h/riscv.hpp ****     return sstatus;
 1081              		.loc 2 179 5
 179:src/../h/riscv.hpp ****     return sstatus;
 1082              		.loc 2 179 76 is_stmt 0
 1083              	#APP
 1084              	# 179 "src/../h/riscv.hpp" 1
 1085              		csrr a5, sstatus
 1086              	# 0 "" 2
 1087              	#NO_APP
 1088 04d8 233CF4F8 		sd	a5,-104(s0)
 180:src/../h/riscv.hpp **** }
 1089              		.loc 2 180 5 is_stmt 1
 180:src/../h/riscv.hpp **** }
 1090              		.loc 2 180 12 is_stmt 0
 1091 04dc 833784F9 		ld	a5,-104(s0)
 1092              	.LBE95:
 1093              	.LBE94:
 223:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 1094              		.loc 1 223 45
 1095 04e0 2334F4F6 		sd	a5,-152(s0)
 225:src/riscv.cpp ****         WaitList::wake();
 1096              		.loc 1 225 9 is_stmt 1
 225:src/riscv.cpp ****         WaitList::wake();
 1097              		.loc 1 225 23 is_stmt 0
 1098 04e4 97000000 		call	_ZN8WaitList4wakeEv@plt
 1098      E7800000 
 1099              	.LVL47:
 227:src/riscv.cpp ****         TCB::timeSliceCounter++;
 1100              		.loc 1 227 9 is_stmt 1
 227:src/riscv.cpp ****         TCB::timeSliceCounter++;
 1101              		.loc 1 227 30 is_stmt 0
 1102 04ec 17070000 		la	a4,_ZN3TCB16timeSliceCounterE
 1102      03370700 
 1103 04f4 83370700 		ld	a5,0(a4)
 1104 04f8 93871700 		addi	a5,a5,1
 1105 04fc 2330F700 		sd	a5,0(a4)
GAS LISTING /tmp/ccXmE4MK.s 			page 36


 229:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
 1106              		.loc 1 229 9 is_stmt 1
 229:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
 1107              		.loc 1 229 64 is_stmt 0
 1108 0500 17070000 		la	a4,_ZN3TCB7runningE
 1108      03370700 
 1109 0508 03370700 		ld	a4,0(a4)
 1110              	.LVL48:
 1111              	.LBB96:
 1112              	.LBB97:
  75:src/../h/../h/tcb.hpp ****     static uint64 timeSliceCounter;
 1113              		.loc 3 75 35 is_stmt 1
  75:src/../h/../h/tcb.hpp ****     static uint64 timeSliceCounter;
 1114              		.loc 3 75 48 is_stmt 0
 1115 050c 03378702 		ld	a4,40(a4)
 1116              	.LVL49:
 1117              	.LBE97:
 1118              	.LBE96:
 229:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
 1119              		.loc 1 229 9
 1120 0510 63FCE700 		bgeu	a5,a4,.L35
 1121              	.L30:
 233:src/riscv.cpp ****         w_sepc(sepc);
 1122              		.loc 1 233 9 is_stmt 1
 233:src/riscv.cpp ****         w_sepc(sepc);
 1123              		.loc 1 233 15 is_stmt 0
 1124 0514 833704F6 		ld	a5,-160(s0)
 1125              	.LVL50:
 1126              	.LBB98:
 1127              	.LBB99:
 117:src/../h/riscv.hpp **** }
 1128              		.loc 2 117 5 is_stmt 1
 117:src/../h/riscv.hpp **** }
 1129              		.loc 2 117 65 is_stmt 0
 1130              	#APP
 1131              	# 117 "src/../h/riscv.hpp" 1
 1132              		csrw sepc, a5
 1133              	# 0 "" 2
 1134              	.LVL51:
 1135              	#NO_APP
 1136              	.LBE99:
 1137              	.LBE98:
 234:src/riscv.cpp ****         w_sstatus(sstatus);
 1138              		.loc 1 234 9 is_stmt 1
 234:src/riscv.cpp ****         w_sstatus(sstatus);
 1139              		.loc 1 234 18 is_stmt 0
 1140 051c 833784F6 		ld	a5,-152(s0)
 1141              	.LVL52:
 1142              	.LBB100:
 1143              	.LBB101:
 185:src/../h/riscv.hpp **** }
 1144              		.loc 2 185 5 is_stmt 1
 185:src/../h/riscv.hpp **** }
 1145              		.loc 2 185 77 is_stmt 0
 1146              	#APP
 1147              	# 185 "src/../h/riscv.hpp" 1
 1148              		csrw sstatus, a5
GAS LISTING /tmp/ccXmE4MK.s 			page 37


 1149              	# 0 "" 2
 1150              		.loc 2 186 1
 1151              	#NO_APP
 1152 0524 6FF01FCF 		j	.L5
 1153              	.LVL53:
 1154              	.L35:
 1155              	.LBE101:
 1156              	.LBE100:
 230:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 1157              		.loc 1 230 13 is_stmt 1
 230:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 1158              		.loc 1 230 35 is_stmt 0
 1159 0528 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 1159      83B70700 
 1160 0530 23B00700 		sd	zero,0(a5)
 231:src/riscv.cpp ****             TCB::dispatch();
 1161              		.loc 1 231 13 is_stmt 1
 231:src/riscv.cpp ****             TCB::dispatch();
 1162              		.loc 1 231 26 is_stmt 0
 1163 0534 97000000 		call	_ZN3TCB8dispatchEv@plt
 1163      E7800000 
 1164              	.LVL54:
 1165 053c 6FF09FFD 		j	.L30
 1166              	.LBE89:
 1167              	.LBE111:
 1168              	.LBE143:
 1169              	.LBE148:
 1170              		.cfi_endproc
 1171              	.LFE68:
 1173              		.globl	_ZN5Riscv4userE
 1174              		.bss
 1175              		.set	.LANCHOR0,. + 0
 1178              	_ZN5Riscv4userE:
 1179 0000 00       		.zero	1
 1180              		.text
 1181              	.Letext0:
 1182              		.file 6 "src/../h/../lib/hw.h"
 1183              		.file 7 "src/../h/../h/../h/../h/memory_allocator.hpp"
 1184              		.file 8 "src/../h/../h/../h/wait_list.hpp"
 1185              		.file 9 "src/../h/syscall_c.hpp"
 1186              		.file 10 "src/../h/../h/bounded_buffer.hpp"
 1187              		.file 11 "src/../h/console.hpp"
 1188              		.file 12 "src/../test/printing.hpp"
GAS LISTING /tmp/ccXmE4MK.s 			page 38


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccXmE4MK.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccXmE4MK.s:13     .text:0000000000000000 .L0 
     /tmp/ccXmE4MK.s:14     .text:0000000000000000 .L0 
     /tmp/ccXmE4MK.s:15     .text:0000000000000004 .L0 
     /tmp/ccXmE4MK.s:17     .text:0000000000000008 .L0 
     /tmp/ccXmE4MK.s:19     .text:000000000000000c .L0 
     /tmp/ccXmE4MK.s:21     .text:000000000000000c .L0 
     /tmp/ccXmE4MK.s:28     .text:0000000000000018 .L0 
     /tmp/ccXmE4MK.s:29     .text:0000000000000018 .L0 
     /tmp/ccXmE4MK.s:30     .text:0000000000000018 .L0 
     /tmp/ccXmE4MK.s:41     .text:0000000000000020 .L0 
       src/riscv.cpp:22     .text:0000000000000020 .L0 
     /tmp/ccXmE4MK.s:47     .text:0000000000000024 .L0 
       src/riscv.cpp:23     .text:0000000000000024 .L0 
     /tmp/ccXmE4MK.s:53     .text:0000000000000028 .L0 
     /tmp/ccXmE4MK.s:54     .text:000000000000002c .L0 
     /tmp/ccXmE4MK.s:55     .text:000000000000002c .L0 
     /tmp/ccXmE4MK.s:56     .text:000000000000002c .L0 
     /tmp/ccXmE4MK.s:58     .text:0000000000000030 .L0 
     /tmp/ccXmE4MK.s:61     .text:0000000000000034 .L0 
     /tmp/ccXmE4MK.s:66     .text:0000000000000034 .L0 
     /tmp/ccXmE4MK.s:67     .text:0000000000000034 .L0 
     /tmp/ccXmE4MK.s:68     .text:0000000000000034 .L0 
     /tmp/ccXmE4MK.s:75     .text:000000000000003c .L0 
     /tmp/ccXmE4MK.s:78     .text:0000000000000040 .L0 
     /tmp/ccXmE4MK.s:98     .text:0000000000000040 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccXmE4MK.s:101    .text:0000000000000040 .L0 
     /tmp/ccXmE4MK.s:102    .text:0000000000000040 .L0 
     /tmp/ccXmE4MK.s:103    .text:0000000000000044 .L0 
     /tmp/ccXmE4MK.s:108    .text:0000000000000054 .L0 
     /tmp/ccXmE4MK.s:109    .text:0000000000000054 .L0 
     /tmp/ccXmE4MK.s:110    .text:0000000000000054 .L0 
     /tmp/ccXmE4MK.s:111    .text:0000000000000054 .L0 
     /tmp/ccXmE4MK.s:113    .text:0000000000000058 .L0 
     /tmp/ccXmE4MK.s:117    .text:0000000000000058 .L0 
     /tmp/ccXmE4MK.s:118    .text:0000000000000058 .L0 
     /tmp/ccXmE4MK.s:119    .text:0000000000000058 .L0 
  src/../h/riscv.hpp:99     .text:0000000000000058 .L0 
     /tmp/ccXmE4MK.s:127    .text:0000000000000060 .L0 
     /tmp/ccXmE4MK.s:128    .text:0000000000000060 .L0 
     /tmp/ccXmE4MK.s:132    .text:0000000000000064 .L0 
     /tmp/ccXmE4MK.s:134    .text:0000000000000068 .L0 
     /tmp/ccXmE4MK.s:135    .text:0000000000000068 .L0 
       src/riscv.cpp:33     .text:0000000000000068 .L0 
     /tmp/ccXmE4MK.s:143    .text:0000000000000070 .L0 
     /tmp/ccXmE4MK.s:144    .text:0000000000000070 .L0 
       src/riscv.cpp:35     .text:0000000000000070 .L0 
     /tmp/ccXmE4MK.s:152    .text:0000000000000078 .L0 
     /tmp/ccXmE4MK.s:153    .text:0000000000000078 .L0 
       src/riscv.cpp:37     .text:0000000000000078 .L0 
     /tmp/ccXmE4MK.s:161    .text:0000000000000080 .L0 
     /tmp/ccXmE4MK.s:162    .text:0000000000000080 .L0 
       src/riscv.cpp:39     .text:0000000000000080 .L0 
     /tmp/ccXmE4MK.s:171    .text:0000000000000088 .L0 
     /tmp/ccXmE4MK.s:172    .text:0000000000000088 .L0 
GAS LISTING /tmp/ccXmE4MK.s 			page 39


     /tmp/ccXmE4MK.s:174    .text:000000000000008c .L0 
     /tmp/ccXmE4MK.s:177    .text:0000000000000094 .L0 
     /tmp/ccXmE4MK.s:179    .text:0000000000000098 .L0 
     /tmp/ccXmE4MK.s:185    .text:00000000000000a0 .L0 
     /tmp/ccXmE4MK.s:186    .text:00000000000000a0 .L0 
     /tmp/ccXmE4MK.s:188    .text:00000000000000a4 .L0 
     /tmp/ccXmE4MK.s:198    .text:00000000000000b4 .L0 
     /tmp/ccXmE4MK.s:199    .text:00000000000000b4 .L0 
     /tmp/ccXmE4MK.s:201    .text:00000000000000b8 .L0 
     /tmp/ccXmE4MK.s:206    .text:00000000000000c8 .L0 
     /tmp/ccXmE4MK.s:207    .text:00000000000000c8 .L0 
     /tmp/ccXmE4MK.s:211    .text:00000000000000d4 .L0 
     /tmp/ccXmE4MK.s:212    .text:00000000000000d4 .L0 
     /tmp/ccXmE4MK.s:216    .text:00000000000000e4 .L0 
     /tmp/ccXmE4MK.s:217    .text:00000000000000e4 .L0 
     /tmp/ccXmE4MK.s:224    .text:00000000000000fc .L0 
     /tmp/ccXmE4MK.s:225    .text:00000000000000fc .L0 
     /tmp/ccXmE4MK.s:231    .text:000000000000010c .L0 
     /tmp/ccXmE4MK.s:232    .text:000000000000010c .L0 
     /tmp/ccXmE4MK.s:233    .text:000000000000010c .L0 
  src/../h/riscv.hpp:111    .text:000000000000010c .L0 
     /tmp/ccXmE4MK.s:241    .text:0000000000000114 .L0 
     /tmp/ccXmE4MK.s:242    .text:0000000000000114 .L0 
     /tmp/ccXmE4MK.s:246    .text:0000000000000118 .L0 
     /tmp/ccXmE4MK.s:252    .text:000000000000012c .L0 
     /tmp/ccXmE4MK.s:253    .text:000000000000012c .L0 
     /tmp/ccXmE4MK.s:259    .text:000000000000013c .L0 
     /tmp/ccXmE4MK.s:260    .text:000000000000013c .L0 
     /tmp/ccXmE4MK.s:261    .text:000000000000013c .L0 
  src/../h/riscv.hpp:135    .text:000000000000013c .L0 
     /tmp/ccXmE4MK.s:269    .text:0000000000000144 .L0 
     /tmp/ccXmE4MK.s:270    .text:0000000000000144 .L0 
     /tmp/ccXmE4MK.s:274    .text:0000000000000148 .L0 
     /tmp/ccXmE4MK.s:280    .text:000000000000015c .L0 
     /tmp/ccXmE4MK.s:281    .text:000000000000015c .L0 
     /tmp/ccXmE4MK.s:285    .text:000000000000016c .L0 
     /tmp/ccXmE4MK.s:286    .text:000000000000016c .L0 
     /tmp/ccXmE4MK.s:289    .text:0000000000000174 .L0 
       src/riscv.cpp:247    .text:0000000000000174 .L0 
     /tmp/ccXmE4MK.s:295    .text:000000000000017c .L0 
       src/riscv.cpp:248    .text:000000000000017c .L0 
     /tmp/ccXmE4MK.s:300    .text:0000000000000180 .L0 
       src/riscv.cpp:249    .text:0000000000000180 .L0 
     /tmp/ccXmE4MK.s:309    .text:0000000000000184 .L0 
     /tmp/ccXmE4MK.s:316    .text:0000000000000188 .L0 
     /tmp/ccXmE4MK.s:317    .text:0000000000000188 .L0 
     /tmp/ccXmE4MK.s:318    .text:0000000000000188 .L0 
  src/../h/riscv.hpp:111    .text:0000000000000188 .L0 
     /tmp/ccXmE4MK.s:326    .text:0000000000000190 .L0 
     /tmp/ccXmE4MK.s:327    .text:0000000000000190 .L0 
     /tmp/ccXmE4MK.s:331    .text:0000000000000194 .L0 
     /tmp/ccXmE4MK.s:333    .text:0000000000000198 .L0 
     /tmp/ccXmE4MK.s:334    .text:0000000000000198 .L0 
     /tmp/ccXmE4MK.s:340    .text:00000000000001a4 .L0 
     /tmp/ccXmE4MK.s:341    .text:00000000000001a4 .L0 
     /tmp/ccXmE4MK.s:342    .text:00000000000001a4 .L0 
  src/../h/riscv.hpp:179    .text:00000000000001a4 .L0 
GAS LISTING /tmp/ccXmE4MK.s 			page 40


     /tmp/ccXmE4MK.s:350    .text:00000000000001ac .L0 
     /tmp/ccXmE4MK.s:351    .text:00000000000001ac .L0 
     /tmp/ccXmE4MK.s:355    .text:00000000000001b0 .L0 
     /tmp/ccXmE4MK.s:357    .text:00000000000001b4 .L0 
     /tmp/ccXmE4MK.s:358    .text:00000000000001b4 .L0 
     /tmp/ccXmE4MK.s:359    .text:00000000000001b4 .L0 
     /tmp/ccXmE4MK.s:360    .text:00000000000001b4 .L0 
     /tmp/ccXmE4MK.s:364    .text:00000000000001bc .L0 
     /tmp/ccXmE4MK.s:365    .text:00000000000001bc .L0 
     /tmp/ccXmE4MK.s:450    .text:00000000000001e4 .L0 
     /tmp/ccXmE4MK.s:451    .text:00000000000001e4 .L0 
     /tmp/ccXmE4MK.s:452    .text:00000000000001e4 .L0 
     /tmp/ccXmE4MK.s:453    .text:00000000000001e4 .L0 
     /tmp/ccXmE4MK.s:454    .text:00000000000001e4 .L0 
     /tmp/ccXmE4MK.s:457    .text:00000000000001ec .L0 
     /tmp/ccXmE4MK.s:458    .text:00000000000001ec .L0 
     /tmp/ccXmE4MK.s:462    .text:00000000000001f8 .L0 
     /tmp/ccXmE4MK.s:464    .text:00000000000001fc .L0 
     /tmp/ccXmE4MK.s:465    .text:00000000000001fc .L0 
       src/riscv.cpp:62     .text:0000000000000200 .L0 
     /tmp/ccXmE4MK.s:476    .text:0000000000000204 .L0 
     /tmp/ccXmE4MK.s:477    .text:0000000000000204 .L0 
     /tmp/ccXmE4MK.s:478    .text:0000000000000204 .L0 
     /tmp/ccXmE4MK.s:483    .text:0000000000000208 .L0 
  src/../h/riscv.hpp:117    .text:0000000000000208 .L0 
     /tmp/ccXmE4MK.s:493    .text:000000000000020c .L0 
     /tmp/ccXmE4MK.s:494    .text:000000000000020c .L0 
     /tmp/ccXmE4MK.s:499    .text:0000000000000210 .L0 
  src/../h/riscv.hpp:185    .text:0000000000000210 .L0 
     /tmp/ccXmE4MK.s:512    .text:0000000000000214 .L0 
     /tmp/ccXmE4MK.s:513    .text:0000000000000218 .L0 
     /tmp/ccXmE4MK.s:514    .text:0000000000000218 .L0 
     /tmp/ccXmE4MK.s:516    .text:000000000000021c .L0 
     /tmp/ccXmE4MK.s:517    .text:000000000000021c .L0 
     /tmp/ccXmE4MK.s:519    .text:0000000000000220 .L0 
     /tmp/ccXmE4MK.s:521    .text:0000000000000224 .L0 
     /tmp/ccXmE4MK.s:523    .text:0000000000000228 .L0 
     /tmp/ccXmE4MK.s:526    .text:000000000000022c .L0 
     /tmp/ccXmE4MK.s:532    .text:000000000000022c .L0 
     /tmp/ccXmE4MK.s:533    .text:000000000000022c .L0 
     /tmp/ccXmE4MK.s:534    .text:000000000000022c .L0 
     /tmp/ccXmE4MK.s:535    .text:000000000000022c .L0 
     /tmp/ccXmE4MK.s:536    .text:000000000000022c .L0 
     /tmp/ccXmE4MK.s:539    .text:0000000000000234 .L0 
     /tmp/ccXmE4MK.s:540    .text:0000000000000234 .L0 
     /tmp/ccXmE4MK.s:544    .text:0000000000000240 .L0 
     /tmp/ccXmE4MK.s:546    .text:0000000000000244 .L0 
     /tmp/ccXmE4MK.s:547    .text:0000000000000244 .L0 
       src/riscv.cpp:74     .text:0000000000000248 .L0 
     /tmp/ccXmE4MK.s:555    .text:000000000000024c .L0 
     /tmp/ccXmE4MK.s:558    .text:0000000000000250 .L0 
     /tmp/ccXmE4MK.s:559    .text:0000000000000250 .L0 
     /tmp/ccXmE4MK.s:560    .text:0000000000000250 .L0 
     /tmp/ccXmE4MK.s:561    .text:0000000000000250 .L0 
     /tmp/ccXmE4MK.s:562    .text:0000000000000250 .L0 
     /tmp/ccXmE4MK.s:563    .text:0000000000000250 .L0 
     /tmp/ccXmE4MK.s:566    .text:0000000000000258 .L0 
GAS LISTING /tmp/ccXmE4MK.s 			page 41


     /tmp/ccXmE4MK.s:567    .text:0000000000000258 .L0 
     /tmp/ccXmE4MK.s:570    .text:0000000000000260 .L0 
     /tmp/ccXmE4MK.s:571    .text:0000000000000260 .L0 
     /tmp/ccXmE4MK.s:574    .text:0000000000000268 .L0 
     /tmp/ccXmE4MK.s:575    .text:0000000000000268 .L0 
     /tmp/ccXmE4MK.s:578    .text:0000000000000270 .L0 
     /tmp/ccXmE4MK.s:580    .text:0000000000000274 .L0 
     /tmp/ccXmE4MK.s:584    .text:0000000000000280 .L0 
     /tmp/ccXmE4MK.s:586    .text:0000000000000284 .L0 
     /tmp/ccXmE4MK.s:587    .text:0000000000000284 .L0 
     /tmp/ccXmE4MK.s:589    .text:0000000000000288 .L0 
     /tmp/ccXmE4MK.s:591    .text:000000000000028c .L0 
       src/riscv.cpp:93     .text:000000000000028c .L0 
     /tmp/ccXmE4MK.s:600    .text:0000000000000294 .L0 
       src/riscv.cpp:95     .text:0000000000000294 .L0 
     /tmp/ccXmE4MK.s:609    .text:000000000000029c .L0 
     /tmp/ccXmE4MK.s:610    .text:000000000000029c .L0 
     /tmp/ccXmE4MK.s:611    .text:000000000000029c .L0 
     /tmp/ccXmE4MK.s:618    .text:00000000000002a8 .L0 
     /tmp/ccXmE4MK.s:619    .text:00000000000002a8 .L0 
     /tmp/ccXmE4MK.s:625    .text:00000000000002b0 .L0 
     /tmp/ccXmE4MK.s:626    .text:00000000000002b0 .L0 
     /tmp/ccXmE4MK.s:629    .text:00000000000002b8 .L0 
       src/riscv.cpp:103    .text:00000000000002b8 .L0 
     /tmp/ccXmE4MK.s:636    .text:00000000000002bc .L0 
     /tmp/ccXmE4MK.s:639    .text:00000000000002c0 .L0 
     /tmp/ccXmE4MK.s:640    .text:00000000000002c0 .L0 
     /tmp/ccXmE4MK.s:641    .text:00000000000002c0 .L0 
     /tmp/ccXmE4MK.s:644    .text:00000000000002c8 .L0 
     /tmp/ccXmE4MK.s:647    .text:00000000000002cc .L0 
     /tmp/ccXmE4MK.s:648    .text:00000000000002cc .L0 
     /tmp/ccXmE4MK.s:649    .text:00000000000002cc .L0 
     /tmp/ccXmE4MK.s:650    .text:00000000000002cc .L0 
     /tmp/ccXmE4MK.s:653    .text:00000000000002d4 .L0 
     /tmp/ccXmE4MK.s:654    .text:00000000000002d4 .L0 
     /tmp/ccXmE4MK.s:656    .text:00000000000002d8 .L0 
     /tmp/ccXmE4MK.s:658    .text:00000000000002dc .L0 
     /tmp/ccXmE4MK.s:659    .text:00000000000002dc .L0 
     /tmp/ccXmE4MK.s:666    .text:00000000000002ec .L0 
     /tmp/ccXmE4MK.s:667    .text:00000000000002ec .L0 
     /tmp/ccXmE4MK.s:674    .text:00000000000002f0 .L0 
     /tmp/ccXmE4MK.s:675    .text:00000000000002f0 .L0 
     /tmp/ccXmE4MK.s:676    .text:00000000000002f0 .L0 
     /tmp/ccXmE4MK.s:682    .text:00000000000002f8 .L0 
     /tmp/ccXmE4MK.s:683    .text:00000000000002f8 .L0 
     /tmp/ccXmE4MK.s:686    .text:0000000000000300 .L0 
     /tmp/ccXmE4MK.s:687    .text:0000000000000300 .L0 
     /tmp/ccXmE4MK.s:692    .text:000000000000030c .L0 
     /tmp/ccXmE4MK.s:693    .text:000000000000030c .L0 
     /tmp/ccXmE4MK.s:694    .text:000000000000030c .L0 
     /tmp/ccXmE4MK.s:695    .text:000000000000030c .L0 
     /tmp/ccXmE4MK.s:696    .text:000000000000030c .L0 
     /tmp/ccXmE4MK.s:699    .text:0000000000000314 .L0 
     /tmp/ccXmE4MK.s:700    .text:0000000000000314 .L0 
     /tmp/ccXmE4MK.s:703    .text:000000000000031c .L0 
     /tmp/ccXmE4MK.s:705    .text:0000000000000320 .L0 
     /tmp/ccXmE4MK.s:706    .text:0000000000000320 .L0 
GAS LISTING /tmp/ccXmE4MK.s 			page 42


     /tmp/ccXmE4MK.s:709    .text:0000000000000328 .L0 
     /tmp/ccXmE4MK.s:724    .text:000000000000032c .L0 
     /tmp/ccXmE4MK.s:725    .text:000000000000032c .L0 
     /tmp/ccXmE4MK.s:726    .text:000000000000032c .L0 
     /tmp/ccXmE4MK.s:734    .text:0000000000000338 .L0 
     /tmp/ccXmE4MK.s:740    .text:000000000000033c .L0 
     /tmp/ccXmE4MK.s:746    .text:0000000000000344 .L0 
     /tmp/ccXmE4MK.s:752    .text:0000000000000348 .L0 
     /tmp/ccXmE4MK.s:754    .text:000000000000034c .L0 
     /tmp/ccXmE4MK.s:755    .text:000000000000034c .L0 
     /tmp/ccXmE4MK.s:757    .text:0000000000000350 .L0 
     /tmp/ccXmE4MK.s:759    .text:0000000000000354 .L0 
     /tmp/ccXmE4MK.s:761    .text:0000000000000358 .L0 
     /tmp/ccXmE4MK.s:762    .text:0000000000000358 .L0 
     /tmp/ccXmE4MK.s:771    .text:0000000000000364 .L0 
     /tmp/ccXmE4MK.s:772    .text:0000000000000364 .L0 
     /tmp/ccXmE4MK.s:781    .text:0000000000000370 .L0 
     /tmp/ccXmE4MK.s:782    .text:0000000000000370 .L0 
     /tmp/ccXmE4MK.s:783    .text:0000000000000370 .L0 
     /tmp/ccXmE4MK.s:786    .text:0000000000000378 .L0 
     /tmp/ccXmE4MK.s:787    .text:0000000000000378 .L0 
     /tmp/ccXmE4MK.s:791    .text:0000000000000384 .L0 
     /tmp/ccXmE4MK.s:793    .text:0000000000000388 .L0 
     /tmp/ccXmE4MK.s:794    .text:0000000000000388 .L0 
       src/riscv.cpp:148    .text:000000000000038c .L0 
     /tmp/ccXmE4MK.s:802    .text:0000000000000390 .L0 
     /tmp/ccXmE4MK.s:805    .text:0000000000000394 .L0 
     /tmp/ccXmE4MK.s:806    .text:0000000000000394 .L0 
     /tmp/ccXmE4MK.s:807    .text:0000000000000394 .L0 
     /tmp/ccXmE4MK.s:810    .text:000000000000039c .L0 
     /tmp/ccXmE4MK.s:811    .text:000000000000039c .L0 
     /tmp/ccXmE4MK.s:815    .text:00000000000003a8 .L0 
     /tmp/ccXmE4MK.s:817    .text:00000000000003ac .L0 
     /tmp/ccXmE4MK.s:818    .text:00000000000003ac .L0 
       src/riscv.cpp:156    .text:00000000000003b0 .L0 
     /tmp/ccXmE4MK.s:826    .text:00000000000003b4 .L0 
     /tmp/ccXmE4MK.s:829    .text:00000000000003b8 .L0 
     /tmp/ccXmE4MK.s:830    .text:00000000000003b8 .L0 
     /tmp/ccXmE4MK.s:831    .text:00000000000003b8 .L0 
     /tmp/ccXmE4MK.s:834    .text:00000000000003c0 .L0 
     /tmp/ccXmE4MK.s:835    .text:00000000000003c0 .L0 
     /tmp/ccXmE4MK.s:839    .text:00000000000003cc .L0 
     /tmp/ccXmE4MK.s:841    .text:00000000000003d0 .L0 
     /tmp/ccXmE4MK.s:842    .text:00000000000003d0 .L0 
       src/riscv.cpp:164    .text:00000000000003d4 .L0 
     /tmp/ccXmE4MK.s:850    .text:00000000000003d8 .L0 
     /tmp/ccXmE4MK.s:853    .text:00000000000003dc .L0 
     /tmp/ccXmE4MK.s:854    .text:00000000000003dc .L0 
     /tmp/ccXmE4MK.s:855    .text:00000000000003dc .L0 
     /tmp/ccXmE4MK.s:858    .text:00000000000003e4 .L0 
     /tmp/ccXmE4MK.s:859    .text:00000000000003e4 .L0 
     /tmp/ccXmE4MK.s:863    .text:00000000000003f0 .L0 
     /tmp/ccXmE4MK.s:865    .text:00000000000003f4 .L0 
     /tmp/ccXmE4MK.s:866    .text:00000000000003f4 .L0 
       src/riscv.cpp:173    .text:00000000000003f8 .L0 
     /tmp/ccXmE4MK.s:874    .text:00000000000003fc .L0 
     /tmp/ccXmE4MK.s:877    .text:0000000000000400 .L0 
GAS LISTING /tmp/ccXmE4MK.s 			page 43


     /tmp/ccXmE4MK.s:878    .text:0000000000000400 .L0 
     /tmp/ccXmE4MK.s:879    .text:0000000000000400 .L0 
     /tmp/ccXmE4MK.s:882    .text:0000000000000408 .L0 
     /tmp/ccXmE4MK.s:883    .text:0000000000000408 .L0 
     /tmp/ccXmE4MK.s:884    .text:0000000000000408 .L0 
     /tmp/ccXmE4MK.s:887    .text:0000000000000410 .L0 
     /tmp/ccXmE4MK.s:888    .text:0000000000000410 .L0 
     /tmp/ccXmE4MK.s:893    .text:0000000000000420 .L0 
     /tmp/ccXmE4MK.s:895    .text:0000000000000424 .L0 
     /tmp/ccXmE4MK.s:896    .text:0000000000000424 .L0 
       src/riscv.cpp:184    .text:0000000000000428 .L0 
     /tmp/ccXmE4MK.s:904    .text:000000000000042c .L0 
     /tmp/ccXmE4MK.s:907    .text:0000000000000430 .L0 
     /tmp/ccXmE4MK.s:908    .text:0000000000000430 .L0 
     /tmp/ccXmE4MK.s:909    .text:0000000000000430 .L0 
     /tmp/ccXmE4MK.s:913    .text:000000000000043c .L0 
     /tmp/ccXmE4MK.s:915    .text:0000000000000440 .L0 
     /tmp/ccXmE4MK.s:916    .text:0000000000000440 .L0 
       src/riscv.cpp:192    .text:0000000000000444 .L0 
     /tmp/ccXmE4MK.s:924    .text:0000000000000448 .L0 
     /tmp/ccXmE4MK.s:927    .text:000000000000044c .L0 
     /tmp/ccXmE4MK.s:928    .text:000000000000044c .L0 
     /tmp/ccXmE4MK.s:929    .text:000000000000044c .L0 
     /tmp/ccXmE4MK.s:930    .text:000000000000044c .L0 
     /tmp/ccXmE4MK.s:934    .text:0000000000000458 .L0 
     /tmp/ccXmE4MK.s:935    .text:0000000000000458 .L0 
     /tmp/ccXmE4MK.s:940    .text:0000000000000468 .L0 
     /tmp/ccXmE4MK.s:943    .text:000000000000046c .L0 
     /tmp/ccXmE4MK.s:944    .text:000000000000046c .L0 
     /tmp/ccXmE4MK.s:945    .text:000000000000046c .L0 
     /tmp/ccXmE4MK.s:948    .text:0000000000000474 .L0 
     /tmp/ccXmE4MK.s:958    .text:0000000000000478 .L0 
     /tmp/ccXmE4MK.s:959    .text:0000000000000478 .L0 
     /tmp/ccXmE4MK.s:960    .text:0000000000000478 .L0 
  src/../h/riscv.hpp:111    .text:0000000000000478 .L0 
     /tmp/ccXmE4MK.s:968    .text:0000000000000480 .L0 
     /tmp/ccXmE4MK.s:969    .text:0000000000000480 .L0 
     /tmp/ccXmE4MK.s:973    .text:0000000000000484 .L0 
     /tmp/ccXmE4MK.s:977    .text:0000000000000488 .L0 
     /tmp/ccXmE4MK.s:978    .text:0000000000000488 .L0 
     /tmp/ccXmE4MK.s:979    .text:0000000000000488 .L0 
  src/../h/riscv.hpp:179    .text:0000000000000488 .L0 
     /tmp/ccXmE4MK.s:987    .text:0000000000000490 .L0 
     /tmp/ccXmE4MK.s:988    .text:0000000000000490 .L0 
     /tmp/ccXmE4MK.s:992    .text:0000000000000494 .L0 
     /tmp/ccXmE4MK.s:994    .text:0000000000000498 .L0 
     /tmp/ccXmE4MK.s:995    .text:0000000000000498 .L0 
     /tmp/ccXmE4MK.s:998    .text:00000000000004a0 .L0 
     /tmp/ccXmE4MK.s:999    .text:00000000000004a0 .L0 
       src/riscv.cpp:216    .text:00000000000004a4 .L0 
     /tmp/ccXmE4MK.s:1006   .text:00000000000004a8 .L0 
     /tmp/ccXmE4MK.s:1008   .text:00000000000004a8 .L0 
     /tmp/ccXmE4MK.s:1013   .text:00000000000004ac .L0 
  src/../h/riscv.hpp:117    .text:00000000000004ac .L0 
     /tmp/ccXmE4MK.s:1023   .text:00000000000004b0 .L0 
     /tmp/ccXmE4MK.s:1024   .text:00000000000004b0 .L0 
     /tmp/ccXmE4MK.s:1029   .text:00000000000004b4 .L0 
GAS LISTING /tmp/ccXmE4MK.s 			page 44


  src/../h/riscv.hpp:185    .text:00000000000004b4 .L0 
     /tmp/ccXmE4MK.s:1036   .text:00000000000004b8 .L0 
     /tmp/ccXmE4MK.s:1047   .text:00000000000004bc .L0 
     /tmp/ccXmE4MK.s:1048   .text:00000000000004bc .L0 
     /tmp/ccXmE4MK.s:1049   .text:00000000000004bc .L0 
     /tmp/ccXmE4MK.s:1061   .text:00000000000004c4 .L0 
     /tmp/ccXmE4MK.s:1062   .text:00000000000004c4 .L0 
     /tmp/ccXmE4MK.s:1063   .text:00000000000004c4 .L0 
  src/../h/riscv.hpp:111    .text:00000000000004c4 .L0 
     /tmp/ccXmE4MK.s:1071   .text:00000000000004cc .L0 
     /tmp/ccXmE4MK.s:1072   .text:00000000000004cc .L0 
     /tmp/ccXmE4MK.s:1076   .text:00000000000004d0 .L0 
     /tmp/ccXmE4MK.s:1080   .text:00000000000004d4 .L0 
     /tmp/ccXmE4MK.s:1081   .text:00000000000004d4 .L0 
     /tmp/ccXmE4MK.s:1082   .text:00000000000004d4 .L0 
  src/../h/riscv.hpp:179    .text:00000000000004d4 .L0 
     /tmp/ccXmE4MK.s:1090   .text:00000000000004dc .L0 
     /tmp/ccXmE4MK.s:1091   .text:00000000000004dc .L0 
     /tmp/ccXmE4MK.s:1095   .text:00000000000004e0 .L0 
     /tmp/ccXmE4MK.s:1097   .text:00000000000004e4 .L0 
     /tmp/ccXmE4MK.s:1098   .text:00000000000004e4 .L0 
     /tmp/ccXmE4MK.s:1101   .text:00000000000004ec .L0 
     /tmp/ccXmE4MK.s:1102   .text:00000000000004ec .L0 
     /tmp/ccXmE4MK.s:1107   .text:0000000000000500 .L0 
     /tmp/ccXmE4MK.s:1108   .text:0000000000000500 .L0 
     /tmp/ccXmE4MK.s:1114   .text:000000000000050c .L0 
     /tmp/ccXmE4MK.s:1115   .text:000000000000050c .L0 
     /tmp/ccXmE4MK.s:1120   .text:0000000000000510 .L0 
     /tmp/ccXmE4MK.s:1123   .text:0000000000000514 .L0 
     /tmp/ccXmE4MK.s:1124   .text:0000000000000514 .L0 
     /tmp/ccXmE4MK.s:1129   .text:0000000000000518 .L0 
  src/../h/riscv.hpp:117    .text:0000000000000518 .L0 
     /tmp/ccXmE4MK.s:1139   .text:000000000000051c .L0 
     /tmp/ccXmE4MK.s:1140   .text:000000000000051c .L0 
     /tmp/ccXmE4MK.s:1145   .text:0000000000000520 .L0 
  src/../h/riscv.hpp:185    .text:0000000000000520 .L0 
     /tmp/ccXmE4MK.s:1152   .text:0000000000000524 .L0 
     /tmp/ccXmE4MK.s:1158   .text:0000000000000528 .L0 
     /tmp/ccXmE4MK.s:1159   .text:0000000000000528 .L0 
     /tmp/ccXmE4MK.s:1162   .text:0000000000000534 .L0 
     /tmp/ccXmE4MK.s:1163   .text:0000000000000534 .L0 
     /tmp/ccXmE4MK.s:1170   .text:0000000000000540 .L0 
     /tmp/ccXmE4MK.s:1178   .bss:0000000000000000 _ZN5Riscv4userE
     /tmp/ccXmE4MK.s:1175   .bss:0000000000000000 .LANCHOR0
     /tmp/ccXmE4MK.s:1189   .text:0000000000000540 .L0 
     /tmp/ccXmE4MK.s:21     .text:000000000000000c .L0 
     /tmp/ccXmE4MK.s:83     .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccXmE4MK.s:212    .text:00000000000000d4 .L0 
     /tmp/ccXmE4MK.s:86     .rodata.str1.8:0000000000000010 .LC1
     /tmp/ccXmE4MK.s:225    .text:00000000000000fc .L0 
     /tmp/ccXmE4MK.s:89     .rodata.str1.8:0000000000000020 .LC2
     /tmp/ccXmE4MK.s:253    .text:000000000000012c .L0 
     /tmp/ccXmE4MK.s:92     .rodata.str1.8:0000000000000030 .LC3
     /tmp/ccXmE4MK.s:281    .text:000000000000015c .L0 
     /tmp/ccXmE4MK.s:377    .rodata:0000000000000000 .L11
     /tmp/ccXmE4MK.s:369    .text:00000000000001cc .L0 
     /tmp/ccXmE4MK.s:611    .text:000000000000029c .L0 
GAS LISTING /tmp/ccXmE4MK.s 			page 45


     /tmp/ccXmE4MK.s:659    .text:00000000000002dc .L0 
     /tmp/ccXmE4MK.s:1102   .text:00000000000004ec .L0 
     /tmp/ccXmE4MK.s:1108   .text:0000000000000500 .L0 
     /tmp/ccXmE4MK.s:1159   .text:0000000000000528 .L0 
     /tmp/ccXmE4MK.s:60     .text:0000000000000034 .L2
     /tmp/ccXmE4MK.s:37     .text:0000000000000020 .L3
     /tmp/ccXmE4MK.s:310    .text:0000000000000188 .L6
     /tmp/ccXmE4MK.s:949    .text:0000000000000478 .L33
     /tmp/ccXmE4MK.s:1038   .text:00000000000004bc .L34
     /tmp/ccXmE4MK.s:506    .text:0000000000000214 .L5
     /tmp/ccXmE4MK.s:473    .text:0000000000000204 .L9
     /tmp/ccXmE4MK.s:598    .text:0000000000000294 .L26
     /tmp/ccXmE4MK.s:769    .text:0000000000000364 .L27
     /tmp/ccXmE4MK.s:1154   .text:0000000000000528 .L35
     /tmp/ccXmE4MK.s:1121   .text:0000000000000514 .L30
     /tmp/ccXmE4MK.s:447    .text:00000000000001e4 .L25
     /tmp/ccXmE4MK.s:525    .text:000000000000022c .L24
     /tmp/ccXmE4MK.s:556    .text:0000000000000250 .L23
     /tmp/ccXmE4MK.s:607    .text:000000000000029c .L22
     /tmp/ccXmE4MK.s:637    .text:00000000000002c0 .L21
     /tmp/ccXmE4MK.s:690    .text:000000000000030c .L20
     /tmp/ccXmE4MK.s:779    .text:0000000000000370 .L19
     /tmp/ccXmE4MK.s:803    .text:0000000000000394 .L18
     /tmp/ccXmE4MK.s:827    .text:00000000000003b8 .L17
     /tmp/ccXmE4MK.s:875    .text:0000000000000400 .L16
     /tmp/ccXmE4MK.s:851    .text:00000000000003dc .L15
     /tmp/ccXmE4MK.s:645    .text:00000000000002cc .L14
     /tmp/ccXmE4MK.s:905    .text:0000000000000430 .L13
     /tmp/ccXmE4MK.s:925    .text:000000000000044c .L12
     /tmp/ccXmE4MK.s:941    .text:000000000000046c .L10
     /tmp/ccXmE4MK.s:3986   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccXmE4MK.s:5866   .debug_str:0000000000000cc1 .LASF267
     /tmp/ccXmE4MK.s:5940   .debug_str:0000000000000f75 .LASF268
     /tmp/ccXmE4MK.s:5572   .debug_str:000000000000047f .LASF269
     /tmp/ccXmE4MK.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccXmE4MK.s:1181   .text:0000000000000540 .Letext0
     /tmp/ccXmE4MK.s:5420   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccXmE4MK.s:5612   .debug_str:00000000000005ff .LASF0
     /tmp/ccXmE4MK.s:5642   .debug_str:00000000000006f8 .LASF1
     /tmp/ccXmE4MK.s:5792   .debug_str:0000000000000b14 .LASF2
     /tmp/ccXmE4MK.s:5802   .debug_str:0000000000000b66 .LASF4
     /tmp/ccXmE4MK.s:5622   .debug_str:0000000000000644 .LASF3
     /tmp/ccXmE4MK.s:5440   .debug_str:00000000000000a6 .LASF5
     /tmp/ccXmE4MK.s:5754   .debug_str:0000000000000a12 .LASF6
     /tmp/ccXmE4MK.s:5738   .debug_str:00000000000009b1 .LASF7
     /tmp/ccXmE4MK.s:5634   .debug_str:00000000000006c4 .LASF8
     /tmp/ccXmE4MK.s:5574   .debug_str:0000000000000498 .LASF9
     /tmp/ccXmE4MK.s:5590   .debug_str:000000000000052e .LASF10
     /tmp/ccXmE4MK.s:5486   .debug_str:0000000000000202 .LASF11
     /tmp/ccXmE4MK.s:5560   .debug_str:0000000000000435 .LASF12
     /tmp/ccXmE4MK.s:5506   .debug_str:000000000000028f .LASF13
     /tmp/ccXmE4MK.s:5484   .debug_str:00000000000001f2 .LASF14
     /tmp/ccXmE4MK.s:5840   .debug_str:0000000000000c45 .LASF15
     /tmp/ccXmE4MK.s:5540   .debug_str:0000000000000388 .LASF16
     /tmp/ccXmE4MK.s:5826   .debug_str:0000000000000be8 .LASF17
     /tmp/ccXmE4MK.s:5922   .debug_str:0000000000000f19 .LASF74
     /tmp/ccXmE4MK.s:5822   .debug_str:0000000000000bd8 .LASF25
GAS LISTING /tmp/ccXmE4MK.s 			page 46


     /tmp/ccXmE4MK.s:5660   .debug_str:000000000000077f .LASF18
     /tmp/ccXmE4MK.s:5736   .debug_str:00000000000009a8 .LASF19
     /tmp/ccXmE4MK.s:5770   .debug_str:0000000000000a79 .LASF20
     /tmp/ccXmE4MK.s:5890   .debug_str:0000000000000e40 .LASF21
     /tmp/ccXmE4MK.s:5576   .debug_str:00000000000004a8 .LASF22
     /tmp/ccXmE4MK.s:5900   .debug_str:0000000000000e6d .LASF23
     /tmp/ccXmE4MK.s:5758   .debug_str:0000000000000a21 .LASF24
     /tmp/ccXmE4MK.s:5774   .debug_str:0000000000000aa1 .LASF26
     /tmp/ccXmE4MK.s:5648   .debug_str:0000000000000724 .LASF27
     /tmp/ccXmE4MK.s:5550   .debug_str:00000000000003dd .LASF28
     /tmp/ccXmE4MK.s:5944   .debug_str:0000000000000f8e .LASF29
     /tmp/ccXmE4MK.s:5906   .debug_str:0000000000000eb5 .LASF30
     /tmp/ccXmE4MK.s:5554   .debug_str:00000000000003ff .LASF31
     /tmp/ccXmE4MK.s:5864   .debug_str:0000000000000cb4 .LASF32
     /tmp/ccXmE4MK.s:5520   .debug_str:000000000000030c .LASF33
     /tmp/ccXmE4MK.s:5780   .debug_str:0000000000000ac8 .LASF141
     /tmp/ccXmE4MK.s:5600   .debug_str:0000000000000582 .LASF66
     /tmp/ccXmE4MK.s:5610   .debug_str:00000000000005e7 .LASF68
     /tmp/ccXmE4MK.s:5896   .debug_str:0000000000000e5f .LASF34
     /tmp/ccXmE4MK.s:5884   .debug_str:0000000000000e0f .LASF36
     /tmp/ccXmE4MK.s:5788   .debug_str:0000000000000b00 .LASF38
     /tmp/ccXmE4MK.s:5722   .debug_str:000000000000094e .LASF40
     /tmp/ccXmE4MK.s:5766   .debug_str:0000000000000a6d .LASF35
     /tmp/ccXmE4MK.s:5468   .debug_str:0000000000000172 .LASF37
     /tmp/ccXmE4MK.s:5712   .debug_str:0000000000000909 .LASF39
     /tmp/ccXmE4MK.s:5636   .debug_str:00000000000006d7 .LASF41
     /tmp/ccXmE4MK.s:5938   .debug_str:0000000000000f6d .LASF42
     /tmp/ccXmE4MK.s:5872   .debug_str:0000000000000da3 .LASF43
     /tmp/ccXmE4MK.s:5706   .debug_str:00000000000008e5 .LASF44
     /tmp/ccXmE4MK.s:5720   .debug_str:000000000000093a .LASF45
     /tmp/ccXmE4MK.s:5654   .debug_str:0000000000000762 .LASF46
     /tmp/ccXmE4MK.s:5772   .debug_str:0000000000000a8d .LASF47
     /tmp/ccXmE4MK.s:5966   .debug_str:000000000000104b .LASF48
     /tmp/ccXmE4MK.s:5618   .debug_str:0000000000000626 .LASF49
     /tmp/ccXmE4MK.s:5836   .debug_str:0000000000000c31 .LASF50
     /tmp/ccXmE4MK.s:5808   .debug_str:0000000000000b79 .LASF51
     /tmp/ccXmE4MK.s:5810   .debug_str:0000000000000b8c .LASF52
     /tmp/ccXmE4MK.s:5492   .debug_str:000000000000021f .LASF53
     /tmp/ccXmE4MK.s:5532   .debug_str:000000000000035f .LASF54
     /tmp/ccXmE4MK.s:5606   .debug_str:00000000000005ae .LASF55
     /tmp/ccXmE4MK.s:5616   .debug_str:0000000000000620 .LASF56
     /tmp/ccXmE4MK.s:5524   .debug_str:0000000000000328 .LASF57
     /tmp/ccXmE4MK.s:5442   .debug_str:00000000000000ad .LASF58
     /tmp/ccXmE4MK.s:5798   .debug_str:0000000000000b39 .LASF59
     /tmp/ccXmE4MK.s:5790   .debug_str:0000000000000b09 .LASF60
     /tmp/ccXmE4MK.s:5960   .debug_str:000000000000100a .LASF61
     /tmp/ccXmE4MK.s:5924   .debug_str:0000000000000f1f .LASF62
     /tmp/ccXmE4MK.s:5948   .debug_str:0000000000000f9e .LASF63
     /tmp/ccXmE4MK.s:5916   .debug_str:0000000000000eea .LASF64
     /tmp/ccXmE4MK.s:5680   .debug_str:000000000000080c .LASF65
     /tmp/ccXmE4MK.s:5934   .debug_str:0000000000000f54 .LASF67
     /tmp/ccXmE4MK.s:5588   .debug_str:0000000000000512 .LASF69
     /tmp/ccXmE4MK.s:5746   .debug_str:00000000000009dc .LASF270
     /tmp/ccXmE4MK.s:5630   .debug_str:0000000000000685 .LASF271
     /tmp/ccXmE4MK.s:5666   .debug_str:00000000000007a1 .LASF70
     /tmp/ccXmE4MK.s:5626   .debug_str:0000000000000672 .LASF106
     /tmp/ccXmE4MK.s:5640   .debug_str:00000000000006f3 .LASF71
GAS LISTING /tmp/ccXmE4MK.s 			page 47


     /tmp/ccXmE4MK.s:5488   .debug_str:0000000000000211 .LASF72
     /tmp/ccXmE4MK.s:5454   .debug_str:000000000000010f .LASF73
     /tmp/ccXmE4MK.s:5730   .debug_str:0000000000000986 .LASF75
     /tmp/ccXmE4MK.s:5784   .debug_str:0000000000000ae4 .LASF76
     /tmp/ccXmE4MK.s:5778   .debug_str:0000000000000abc .LASF77
     /tmp/ccXmE4MK.s:5452   .debug_str:00000000000000f6 .LASF78
     /tmp/ccXmE4MK.s:5624   .debug_str:0000000000000656 .LASF80
     /tmp/ccXmE4MK.s:5796   .debug_str:0000000000000b2f .LASF91
     /tmp/ccXmE4MK.s:5902   .debug_str:0000000000000e7a .LASF92
     /tmp/ccXmE4MK.s:5620   .debug_str:000000000000063a .LASF117
     /tmp/ccXmE4MK.s:5608   .debug_str:00000000000005c0 .LASF119
     /tmp/ccXmE4MK.s:5682   .debug_str:0000000000000822 .LASF79
     /tmp/ccXmE4MK.s:5444   .debug_str:00000000000000b8 .LASF81
     /tmp/ccXmE4MK.s:5848   .debug_str:0000000000000c69 .LASF82
     /tmp/ccXmE4MK.s:5684   .debug_str:000000000000082c .LASF83
     /tmp/ccXmE4MK.s:5460   .debug_str:0000000000000143 .LASF84
     /tmp/ccXmE4MK.s:5878   .debug_str:0000000000000dca .LASF85
     /tmp/ccXmE4MK.s:5742   .debug_str:00000000000009cd .LASF86
     /tmp/ccXmE4MK.s:5898   .debug_str:0000000000000e68 .LASF272
     /tmp/ccXmE4MK.s:5834   .debug_str:0000000000000c2c .LASF87
     /tmp/ccXmE4MK.s:5708   .debug_str:00000000000008ed .LASF88
     /tmp/ccXmE4MK.s:5694   .debug_str:0000000000000885 .LASF89
     /tmp/ccXmE4MK.s:5828   .debug_str:0000000000000bfe .LASF90
     /tmp/ccXmE4MK.s:5558   .debug_str:000000000000041e .LASF93
     /tmp/ccXmE4MK.s:5782   .debug_str:0000000000000acd .LASF273
     /tmp/ccXmE4MK.s:5638   .debug_str:00000000000006ea .LASF94
     /tmp/ccXmE4MK.s:5472   .debug_str:0000000000000193 .LASF95
     /tmp/ccXmE4MK.s:5542   .debug_str:000000000000039e .LASF96
     /tmp/ccXmE4MK.s:5544   .debug_str:00000000000003a6 .LASF97
     /tmp/ccXmE4MK.s:5732   .debug_str:0000000000000996 .LASF98
     /tmp/ccXmE4MK.s:5918   .debug_str:0000000000000ef4 .LASF99
     /tmp/ccXmE4MK.s:5972   .debug_str:000000000000107b .LASF100
     /tmp/ccXmE4MK.s:5958   .debug_str:0000000000000fef .LASF101
     /tmp/ccXmE4MK.s:5816   .debug_str:0000000000000bb3 .LASF102
     /tmp/ccXmE4MK.s:5632   .debug_str:00000000000006a7 .LASF103
     /tmp/ccXmE4MK.s:5752   .debug_str:0000000000000a09 .LASF104
     /tmp/ccXmE4MK.s:5434   .debug_str:0000000000000058 .LASF105
     /tmp/ccXmE4MK.s:5494   .debug_str:0000000000000232 .LASF107
     /tmp/ccXmE4MK.s:5724   .debug_str:0000000000000963 .LASF108
     /tmp/ccXmE4MK.s:5430   .debug_str:0000000000000043 .LASF109
     /tmp/ccXmE4MK.s:5820   .debug_str:0000000000000bd2 .LASF110
     /tmp/ccXmE4MK.s:5882   .debug_str:0000000000000e07 .LASF111
     /tmp/ccXmE4MK.s:5824   .debug_str:0000000000000bdf .LASF112
     /tmp/ccXmE4MK.s:5756   .debug_str:0000000000000a19 .LASF113
     /tmp/ccXmE4MK.s:5874   .debug_str:0000000000000db7 .LASF114
     /tmp/ccXmE4MK.s:5628   .debug_str:0000000000000678 .LASF115
     /tmp/ccXmE4MK.s:5644   .debug_str:000000000000070b .LASF116
     /tmp/ccXmE4MK.s:5514   .debug_str:00000000000002e1 .LASF118
     /tmp/ccXmE4MK.s:5436   .debug_str:0000000000000072 .LASF120
     /tmp/ccXmE4MK.s:5762   .debug_str:0000000000000a4c .LASF165
     /tmp/ccXmE4MK.s:5964   .debug_str:000000000000103e .LASF121
     /tmp/ccXmE4MK.s:5586   .debug_str:0000000000000506 .LASF122
     /tmp/ccXmE4MK.s:5674   .debug_str:00000000000007d2 .LASF123
     /tmp/ccXmE4MK.s:5568   .debug_str:0000000000000459 .LASF124
     /tmp/ccXmE4MK.s:5432   .debug_str:0000000000000048 .LASF125
     /tmp/ccXmE4MK.s:5718   .debug_str:000000000000092d .LASF126
     /tmp/ccXmE4MK.s:5556   .debug_str:000000000000040b .LASF127
GAS LISTING /tmp/ccXmE4MK.s 			page 48


     /tmp/ccXmE4MK.s:5794   .debug_str:0000000000000b22 .LASF128
     /tmp/ccXmE4MK.s:5838   .debug_str:0000000000000c38 .LASF129
     /tmp/ccXmE4MK.s:5880   .debug_str:0000000000000de6 .LASF130
     /tmp/ccXmE4MK.s:5850   .debug_str:0000000000000c72 .LASF131
     /tmp/ccXmE4MK.s:5702   .debug_str:00000000000008c5 .LASF132
     /tmp/ccXmE4MK.s:5464   .debug_str:000000000000015b .LASF133
     /tmp/ccXmE4MK.s:5886   .debug_str:0000000000000e24 .LASF134
     /tmp/ccXmE4MK.s:5936   .debug_str:0000000000000f63 .LASF135
     /tmp/ccXmE4MK.s:5476   .debug_str:00000000000001b6 .LASF136
     /tmp/ccXmE4MK.s:5854   .debug_str:0000000000000c82 .LASF137
     /tmp/ccXmE4MK.s:5500   .debug_str:0000000000000257 .LASF138
     /tmp/ccXmE4MK.s:5672   .debug_str:00000000000007c5 .LASF139
     /tmp/ccXmE4MK.s:5870   .debug_str:0000000000000d8a .LASF140
     /tmp/ccXmE4MK.s:5812   .debug_str:0000000000000b93 .LASF142
     /tmp/ccXmE4MK.s:5750   .debug_str:00000000000009f9 .LASF143
     /tmp/ccXmE4MK.s:5604   .debug_str:0000000000000593 .LASF144
     /tmp/ccXmE4MK.s:5970   .debug_str:000000000000106b .LASF145
     /tmp/ccXmE4MK.s:5962   .debug_str:0000000000001022 .LASF146
     /tmp/ccXmE4MK.s:5536   .debug_str:000000000000036e .LASF147
     /tmp/ccXmE4MK.s:5908   .debug_str:0000000000000ec4 .LASF148
     /tmp/ccXmE4MK.s:5696   .debug_str:000000000000088a .LASF149
     /tmp/ccXmE4MK.s:5526   .debug_str:000000000000033a .LASF150
     /tmp/ccXmE4MK.s:5528   .debug_str:0000000000000351 .LASF151
     /tmp/ccXmE4MK.s:5496   .debug_str:000000000000023a .LASF152
     /tmp/ccXmE4MK.s:5470   .debug_str:0000000000000185 .LASF153
     /tmp/ccXmE4MK.s:5650   .debug_str:000000000000072d .LASF154
     /tmp/ccXmE4MK.s:5862   .debug_str:0000000000000cac .LASF155
     /tmp/ccXmE4MK.s:5474   .debug_str:00000000000001b0 .LASF156
     /tmp/ccXmE4MK.s:5786   .debug_str:0000000000000af0 .LASF157
     /tmp/ccXmE4MK.s:5804   .debug_str:0000000000000b6d .LASF158
     /tmp/ccXmE4MK.s:5438   .debug_str:000000000000009a .LASF159
     /tmp/ccXmE4MK.s:5914   .debug_str:0000000000000ee1 .LASF160
     /tmp/ccXmE4MK.s:5926   .debug_str:0000000000000f29 .LASF161
     /tmp/ccXmE4MK.s:5912   .debug_str:0000000000000edc .LASF162
     /tmp/ccXmE4MK.s:5744   .debug_str:00000000000009d7 .LASF163
     /tmp/ccXmE4MK.s:5580   .debug_str:00000000000004c4 .LASF164
     /tmp/ccXmE4MK.s:5584   .debug_str:00000000000004ef .LASF166
     /tmp/ccXmE4MK.s:5478   .debug_str:00000000000001cb .LASF167
     /tmp/ccXmE4MK.s:5548   .debug_str:00000000000003c7 .LASF168
     /tmp/ccXmE4MK.s:5656   .debug_str:000000000000076a .LASF169
     /tmp/ccXmE4MK.s:5614   .debug_str:000000000000060c .LASF170
     /tmp/ccXmE4MK.s:5466   .debug_str:0000000000000167 .LASF171
     /tmp/ccXmE4MK.s:5602   .debug_str:000000000000058d .LASF172
     /tmp/ccXmE4MK.s:5920   .debug_str:0000000000000f12 .LASF173
     /tmp/ccXmE4MK.s:5518   .debug_str:00000000000002f8 .LASF174
     /tmp/ccXmE4MK.s:5504   .debug_str:000000000000027b .LASF175
     /tmp/ccXmE4MK.s:5422   .debug_str:0000000000000000 .LASF176
     /tmp/ccXmE4MK.s:5800   .debug_str:0000000000000b51 .LASF177
     /tmp/ccXmE4MK.s:5424   .debug_str:0000000000000015 .LASF178
     /tmp/ccXmE4MK.s:5658   .debug_str:000000000000076f .LASF179
     /tmp/ccXmE4MK.s:5510   .debug_str:00000000000002aa .LASF180
     /tmp/ccXmE4MK.s:5482   .debug_str:00000000000001e9 .LASF181
     /tmp/ccXmE4MK.s:5594   .debug_str:0000000000000545 .LASF182
     /tmp/ccXmE4MK.s:5530   .debug_str:000000000000035a .LASF183
     /tmp/ccXmE4MK.s:5480   .debug_str:00000000000001d2 .LASF184
     /tmp/ccXmE4MK.s:5844   .debug_str:0000000000000c5a .LASF185
     /tmp/ccXmE4MK.s:5552   .debug_str:00000000000003e6 .LASF186
GAS LISTING /tmp/ccXmE4MK.s 			page 49


     /tmp/ccXmE4MK.s:5448   .debug_str:00000000000000e5 .LASF187
     /tmp/ccXmE4MK.s:5968   .debug_str:0000000000001053 .LASF188
     /tmp/ccXmE4MK.s:5728   .debug_str:000000000000097c .LASF189
     /tmp/ccXmE4MK.s:5760   .debug_str:0000000000000a30 .LASF190
     /tmp/ccXmE4MK.s:5846   .debug_str:0000000000000c61 .LASF191
     /tmp/ccXmE4MK.s:5458   .debug_str:0000000000000129 .LASF192
     /tmp/ccXmE4MK.s:5534   .debug_str:0000000000000365 .LASF193
     /tmp/ccXmE4MK.s:5596   .debug_str:0000000000000561 .LASF194
     /tmp/ccXmE4MK.s:5876   .debug_str:0000000000000dc1 .LASF274
     /tmp/ccXmE4MK.s:5662   .debug_str:0000000000000788 .LASF195
     /tmp/ccXmE4MK.s:5566   .debug_str:0000000000000450 .LASF196
     /tmp/ccXmE4MK.s:5860   .debug_str:0000000000000c9e .LASF197
     /tmp/ccXmE4MK.s:5764   .debug_str:0000000000000a61 .LASF198
     /tmp/ccXmE4MK.s:5522   .debug_str:0000000000000318 .LASF199
     /tmp/ccXmE4MK.s:5490   .debug_str:0000000000000216 .LASF200
     /tmp/ccXmE4MK.s:5498   .debug_str:000000000000024d .LASF201
     /tmp/ccXmE4MK.s:5704   .debug_str:00000000000008dc .LASF202
     /tmp/ccXmE4MK.s:5856   .debug_str:0000000000000c8d .LASF203
     /tmp/ccXmE4MK.s:5686   .debug_str:000000000000084d .LASF204
     /tmp/ccXmE4MK.s:5670   .debug_str:00000000000007b9 .LASF205
     /tmp/ccXmE4MK.s:5952   .debug_str:0000000000000fc0 .LASF206
     /tmp/ccXmE4MK.s:5690   .debug_str:000000000000087b .LASF207
     /tmp/ccXmE4MK.s:5692   .debug_str:0000000000000880 .LASF208
     /tmp/ccXmE4MK.s:5716   .debug_str:0000000000000920 .LASF209
     /tmp/ccXmE4MK.s:5578   .debug_str:00000000000004be .LASF210
     /tmp/ccXmE4MK.s:5502   .debug_str:000000000000026d .LASF211
     /tmp/ccXmE4MK.s:5678   .debug_str:00000000000007fe .LASF212
     /tmp/ccXmE4MK.s:5664   .debug_str:0000000000000792 .LASF213
     /tmp/ccXmE4MK.s:5562   .debug_str:0000000000000444 .LASF214
     /tmp/ccXmE4MK.s:5426   .debug_str:0000000000000029 .LASF215
     /tmp/ccXmE4MK.s:5710   .debug_str:00000000000008f2 .LASF216
     /tmp/ccXmE4MK.s:5806   .debug_str:0000000000000b72 .LASF217
     /tmp/ccXmE4MK.s:5652   .debug_str:0000000000000746 .LASF218
     /tmp/ccXmE4MK.s:5598   .debug_str:000000000000057d .LASF219
     /tmp/ccXmE4MK.s:5570   .debug_str:0000000000000465 .LASF220
     /tmp/ccXmE4MK.s:5516   .debug_str:00000000000002ef .LASF221
     /tmp/ccXmE4MK.s:5904   .debug_str:0000000000000e96 .LASF222
     /tmp/ccXmE4MK.s:5852   .debug_str:0000000000000c7d .LASF223
     /tmp/ccXmE4MK.s:5592   .debug_str:000000000000053c .LASF224
     /tmp/ccXmE4MK.s:5450   .debug_str:00000000000000eb .LASF225
     /tmp/ccXmE4MK.s:5942   .debug_str:0000000000000f83 .LASF226
     /tmp/ccXmE4MK.s:5538   .debug_str:0000000000000377 .LASF227
     /tmp/ccXmE4MK.s:5512   .debug_str:00000000000002cd .LASF228
     /tmp/ccXmE4MK.s:5428   .debug_str:000000000000002f .LASF229
     /tmp/ccXmE4MK.s:5698   .debug_str:0000000000000895 .LASF230
     /tmp/ccXmE4MK.s:5676   .debug_str:00000000000007e2 .LASF231
     /tmp/ccXmE4MK.s:5832   .debug_str:0000000000000c18 .LASF232
     /tmp/ccXmE4MK.s:5818   .debug_str:0000000000000bbe .LASF233
     /tmp/ccXmE4MK.s:5446   .debug_str:00000000000000d9 .LASF234
     /tmp/ccXmE4MK.s:5954   .debug_str:0000000000000fcb .LASF235
     /tmp/ccXmE4MK.s:5668   .debug_str:00000000000007a6 .LASF236
     /tmp/ccXmE4MK.s:5700   .debug_str:00000000000008a1 .LASF237
     /tmp/ccXmE4MK.s:5582   .debug_str:00000000000004df .LASF238
     /tmp/ccXmE4MK.s:5688   .debug_str:000000000000085b .LASF239
     /tmp/ccXmE4MK.s:5858   .debug_str:0000000000000c98 .LASF240
     /tmp/ccXmE4MK.s:5456   .debug_str:0000000000000114 .LASF241
     /tmp/ccXmE4MK.s:5714   .debug_str:0000000000000910 .LASF275
GAS LISTING /tmp/ccXmE4MK.s 			page 50


     /tmp/ccXmE4MK.s:5564   .debug_str:000000000000044b .LASF254
     /tmp/ccXmE4MK.s:5462   .debug_str:0000000000000148 .LASF255
     /tmp/ccXmE4MK.s:99     .text:0000000000000040 .LFB68
     /tmp/ccXmE4MK.s:1171   .text:0000000000000540 .LFE68
     /tmp/ccXmE4MK.s:5830   .debug_str:0000000000000c11 .LASF242
     /tmp/ccXmE4MK.s:5888   .debug_str:0000000000000e3b .LASF243
     /tmp/ccXmE4MK.s:5768   .debug_str:0000000000000a74 .LASF244
     /tmp/ccXmE4MK.s:5892   .debug_str:0000000000000e55 .LASF245
     /tmp/ccXmE4MK.s:5894   .debug_str:0000000000000e5a .LASF246
     /tmp/ccXmE4MK.s:5402   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccXmE4MK.s:5868   .debug_str:0000000000000d85 .LASF247
     /tmp/ccXmE4MK.s:5932   .debug_str:0000000000000f4c .LASF248
     /tmp/ccXmE4MK.s:5946   .debug_str:0000000000000f97 .LASF249
     /tmp/ccXmE4MK.s:5508   .debug_str:000000000000029f .LASF250
     /tmp/ccXmE4MK.s:5546   .debug_str:00000000000003c2 .LASF251
     /tmp/ccXmE4MK.s:5748   .debug_str:00000000000009f1 .LASF252
     /tmp/ccXmE4MK.s:5956   .debug_str:0000000000000fe7 .LASF253
     /tmp/ccXmE4MK.s:614    .text:00000000000002a8 .LBB120
     /tmp/ccXmE4MK.s:623    .text:00000000000002b0 .LBE120
     /tmp/ccXmE4MK.s:5240   .debug_loc:0000000000000000 .LLST7
     /tmp/ccXmE4MK.s:5248   .debug_loc:0000000000000024 .LLST8
     /tmp/ccXmE4MK.s:663    .text:00000000000002ec .LBB122
     /tmp/ccXmE4MK.s:670    .text:00000000000002f0 .LBE122
     /tmp/ccXmE4MK.s:5255   .debug_loc:0000000000000047 .LLST9
     /tmp/ccXmE4MK.s:5262   .debug_loc:000000000000006a .LLST10
     /tmp/ccXmE4MK.s:672    .text:00000000000002f0 .LBB124
     /tmp/ccXmE4MK.s:680    .text:00000000000002f8 .LBE124
     /tmp/ccXmE4MK.s:5269   .debug_loc:000000000000008d .LLST11
     /tmp/ccXmE4MK.s:5277   .debug_loc:00000000000000b1 .LLST12
     /tmp/ccXmE4MK.s:721    .text:000000000000032c .LBB126
     /tmp/ccXmE4MK.s:750    .text:0000000000000348 .LBE126
     /tmp/ccXmE4MK.s:5284   .debug_loc:00000000000000d4 .LLST13
     /tmp/ccXmE4MK.s:722    .text:000000000000032c .LBB127
     /tmp/ccXmE4MK.s:730    .text:0000000000000338 .LBE127
     /tmp/ccXmE4MK.s:5291   .debug_loc:00000000000000f7 .LLST14
     /tmp/ccXmE4MK.s:728    .text:0000000000000338 .LVL29
     /tmp/ccXmE4MK.s:731    .text:0000000000000338 .LBB129
     /tmp/ccXmE4MK.s:749    .text:0000000000000348 .LBE129
     /tmp/ccXmE4MK.s:5300   .debug_loc:000000000000011c .LLST15
     /tmp/ccXmE4MK.s:5307   .debug_loc:000000000000013f .LLST16
     /tmp/ccXmE4MK.s:736    .text:000000000000033c .LBB131
     /tmp/ccXmE4MK.s:744    .text:0000000000000344 .LBE131
     /tmp/ccXmE4MK.s:5314   .debug_loc:0000000000000162 .LLST17
     /tmp/ccXmE4MK.s:460    .text:00000000000001f8 .LVL12
     /tmp/ccXmE4MK.s:542    .text:0000000000000240 .LVL17
     /tmp/ccXmE4MK.s:582    .text:0000000000000280 .LVL18
     /tmp/ccXmE4MK.s:627    .text:00000000000002b8 .LVL21
     /tmp/ccXmE4MK.s:642    .text:00000000000002c8 .LVL22
     /tmp/ccXmE4MK.s:684    .text:0000000000000300 .LVL26
     /tmp/ccXmE4MK.s:688    .text:0000000000000308 .LVL27
     /tmp/ccXmE4MK.s:789    .text:0000000000000384 .LVL33
     /tmp/ccXmE4MK.s:813    .text:00000000000003a8 .LVL34
     /tmp/ccXmE4MK.s:837    .text:00000000000003cc .LVL35
     /tmp/ccXmE4MK.s:861    .text:00000000000003f0 .LVL36
     /tmp/ccXmE4MK.s:891    .text:0000000000000420 .LVL37
     /tmp/ccXmE4MK.s:910    .text:0000000000000438 .LVL38
     /tmp/ccXmE4MK.s:938    .text:0000000000000468 .LVL39
GAS LISTING /tmp/ccXmE4MK.s 			page 51


     /tmp/ccXmE4MK.s:946    .text:0000000000000474 .LVL40
     /tmp/ccXmE4MK.s:314    .text:0000000000000188 .LBB114
     /tmp/ccXmE4MK.s:329    .text:0000000000000194 .LBE114
     /tmp/ccXmE4MK.s:338    .text:00000000000001a4 .LBB116
     /tmp/ccXmE4MK.s:353    .text:00000000000001b0 .LBE116
     /tmp/ccXmE4MK.s:480    .text:0000000000000208 .LBB135
     /tmp/ccXmE4MK.s:491    .text:000000000000020c .LBE135
     /tmp/ccXmE4MK.s:5323   .debug_loc:0000000000000187 .LLST18
     /tmp/ccXmE4MK.s:496    .text:0000000000000210 .LBB137
     /tmp/ccXmE4MK.s:508    .text:0000000000000214 .LBE137
     /tmp/ccXmE4MK.s:5330   .debug_loc:00000000000001aa .LLST19
     /tmp/ccXmE4MK.s:954    .text:0000000000000478 .LBB102
     /tmp/ccXmE4MK.s:1041   .text:00000000000004bc .LBE102
     /tmp/ccXmE4MK.s:956    .text:0000000000000478 .LBB103
     /tmp/ccXmE4MK.s:971    .text:0000000000000484 .LBE103
     /tmp/ccXmE4MK.s:975    .text:0000000000000488 .LBB105
     /tmp/ccXmE4MK.s:990    .text:0000000000000494 .LBE105
     /tmp/ccXmE4MK.s:1010   .text:00000000000004ac .LBB107
     /tmp/ccXmE4MK.s:1021   .text:00000000000004b0 .LBE107
     /tmp/ccXmE4MK.s:5337   .debug_loc:00000000000001cd .LLST5
     /tmp/ccXmE4MK.s:1026   .text:00000000000004b4 .LBB109
     /tmp/ccXmE4MK.s:1040   .text:00000000000004bc .LBE109
     /tmp/ccXmE4MK.s:5344   .debug_loc:00000000000001f0 .LLST6
     /tmp/ccXmE4MK.s:996    .text:00000000000004a0 .LVL41
     /tmp/ccXmE4MK.s:1043   .text:00000000000004bc .LBB89
     /tmp/ccXmE4MK.s:1166   .text:0000000000000540 .LBE89
     /tmp/ccXmE4MK.s:1045   .text:00000000000004bc .LBB90
     /tmp/ccXmE4MK.s:1057   .text:00000000000004c4 .LBE90
     /tmp/ccXmE4MK.s:5351   .debug_loc:0000000000000213 .LLST1
     /tmp/ccXmE4MK.s:1059   .text:00000000000004c4 .LBB92
     /tmp/ccXmE4MK.s:1074   .text:00000000000004d0 .LBE92
     /tmp/ccXmE4MK.s:1078   .text:00000000000004d4 .LBB94
     /tmp/ccXmE4MK.s:1093   .text:00000000000004e0 .LBE94
     /tmp/ccXmE4MK.s:1111   .text:000000000000050c .LBB96
     /tmp/ccXmE4MK.s:1118   .text:0000000000000510 .LBE96
     /tmp/ccXmE4MK.s:5359   .debug_loc:0000000000000237 .LLST2
     /tmp/ccXmE4MK.s:1126   .text:0000000000000518 .LBB98
     /tmp/ccXmE4MK.s:1137   .text:000000000000051c .LBE98
     /tmp/ccXmE4MK.s:5366   .debug_loc:000000000000025a .LLST3
     /tmp/ccXmE4MK.s:1142   .text:0000000000000520 .LBB100
     /tmp/ccXmE4MK.s:1156   .text:0000000000000528 .LBE100
     /tmp/ccXmE4MK.s:5373   .debug_loc:000000000000027d .LLST4
     /tmp/ccXmE4MK.s:1099   .text:00000000000004ec .LVL47
     /tmp/ccXmE4MK.s:1164   .text:000000000000053c .LVL54
     /tmp/ccXmE4MK.s:115    .text:0000000000000058 .LBB80
     /tmp/ccXmE4MK.s:130    .text:0000000000000064 .LBE80
     /tmp/ccXmE4MK.s:229    .text:000000000000010c .LBB85
     /tmp/ccXmE4MK.s:244    .text:0000000000000118 .LBE85
     /tmp/ccXmE4MK.s:257    .text:000000000000013c .LBB87
     /tmp/ccXmE4MK.s:272    .text:0000000000000148 .LBE87
     /tmp/ccXmE4MK.s:209    .text:00000000000000d4 .LVL3
     /tmp/ccXmE4MK.s:214    .text:00000000000000e4 .LVL4
     /tmp/ccXmE4MK.s:222    .text:00000000000000fc .LVL5
     /tmp/ccXmE4MK.s:227    .text:000000000000010c .LVL6
     /tmp/ccXmE4MK.s:250    .text:000000000000012c .LVL7
     /tmp/ccXmE4MK.s:255    .text:000000000000013c .LVL8
     /tmp/ccXmE4MK.s:278    .text:000000000000015c .LVL9
GAS LISTING /tmp/ccXmE4MK.s 			page 52


     /tmp/ccXmE4MK.s:283    .text:000000000000016c .LVL10
     /tmp/ccXmE4MK.s:287    .text:0000000000000174 .LVL11
     /tmp/ccXmE4MK.s:10     .text:0000000000000000 .LFB67
     /tmp/ccXmE4MK.s:79     .text:0000000000000040 .LFE67
     /tmp/ccXmE4MK.s:25     .text:0000000000000018 .LBB76
     /tmp/ccXmE4MK.s:39     .text:0000000000000020 .LBE76
     /tmp/ccXmE4MK.s:5380   .debug_loc:00000000000002a0 .LLST0
     /tmp/ccXmE4MK.s:64     .text:0000000000000034 .LBB78
     /tmp/ccXmE4MK.s:77     .text:0000000000000040 .LBE78
     /tmp/ccXmE4MK.s:5726   .debug_str:0000000000000968 .LASF256
     /tmp/ccXmE4MK.s:5910   .debug_str:0000000000000ed7 .LASF257
     /tmp/ccXmE4MK.s:5734   .debug_str:00000000000009a2 .LASF258
     /tmp/ccXmE4MK.s:5928   .debug_str:0000000000000f32 .LASF259
     /tmp/ccXmE4MK.s:5776   .debug_str:0000000000000aac .LASF261
     /tmp/ccXmE4MK.s:5842   .debug_str:0000000000000c51 .LASF260
     /tmp/ccXmE4MK.s:5930   .debug_str:0000000000000f47 .LASF262
     /tmp/ccXmE4MK.s:5646   .debug_str:0000000000000711 .LASF263
     /tmp/ccXmE4MK.s:5950   .debug_str:0000000000000fb4 .LASF264
     /tmp/ccXmE4MK.s:5814   .debug_str:0000000000000ba4 .LASF265
     /tmp/ccXmE4MK.s:5740   .debug_str:00000000000009c4 .LASF266
     /tmp/ccXmE4MK.s:613    .text:00000000000002a8 .LVL19
     /tmp/ccXmE4MK.s:621    .text:00000000000002b0 .LVL20
     /tmp/ccXmE4MK.s:662    .text:00000000000002ec .LVL23
     /tmp/ccXmE4MK.s:668    .text:00000000000002f0 .LVL24
     /tmp/ccXmE4MK.s:678    .text:00000000000002f8 .LVL25
     /tmp/ccXmE4MK.s:710    .text:000000000000032c .LVL28
     /tmp/ccXmE4MK.s:747    .text:0000000000000348 .LVL32
     /tmp/ccXmE4MK.s:735    .text:000000000000033c .LVL30
     /tmp/ccXmE4MK.s:742    .text:0000000000000344 .LVL31
     /tmp/ccXmE4MK.s:479    .text:0000000000000208 .LVL13
     /tmp/ccXmE4MK.s:488    .text:000000000000020c .LVL14
     /tmp/ccXmE4MK.s:495    .text:0000000000000210 .LVL15
     /tmp/ccXmE4MK.s:504    .text:0000000000000214 .LVL16
     /tmp/ccXmE4MK.s:1009   .text:00000000000004ac .LVL42
     /tmp/ccXmE4MK.s:1018   .text:00000000000004b0 .LVL43
     /tmp/ccXmE4MK.s:1025   .text:00000000000004b4 .LVL44
     /tmp/ccXmE4MK.s:1037   .text:00000000000004bc .LVL45
     /tmp/ccXmE4MK.s:1054   .text:00000000000004c4 .LVL46
     /tmp/ccXmE4MK.s:1110   .text:000000000000050c .LVL48
     /tmp/ccXmE4MK.s:1116   .text:0000000000000510 .LVL49
     /tmp/ccXmE4MK.s:1125   .text:0000000000000518 .LVL50
     /tmp/ccXmE4MK.s:1134   .text:000000000000051c .LVL51
     /tmp/ccXmE4MK.s:1141   .text:0000000000000520 .LVL52
     /tmp/ccXmE4MK.s:1153   .text:0000000000000528 .LVL53
     /tmp/ccXmE4MK.s:24     .text:0000000000000018 .LVL0
     /tmp/ccXmE4MK.s:35     .text:0000000000000020 .LVL1
     /tmp/ccXmE4MK.s:1190   .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccXmE4MK.s:312    .text:0000000000000188 .LBB113
     /tmp/ccXmE4MK.s:509    .text:0000000000000214 .LBE113
     /tmp/ccXmE4MK.s:528    .text:000000000000022c .LBB141
     /tmp/ccXmE4MK.s:713    .text:000000000000032c .LBE141
     /tmp/ccXmE4MK.s:718    .text:000000000000032c .LBB142
     /tmp/ccXmE4MK.s:952    .text:0000000000000478 .LBE142
     /tmp/ccXmE4MK.s:448    .text:00000000000001e4 .LBB119
     /tmp/ccXmE4MK.s:474    .text:0000000000000204 .LBE119
     /tmp/ccXmE4MK.s:530    .text:000000000000022c .LBB133
     /tmp/ccXmE4MK.s:711    .text:000000000000032c .LBE133
GAS LISTING /tmp/ccXmE4MK.s 			page 53


     /tmp/ccXmE4MK.s:720    .text:000000000000032c .LBB134
     /tmp/ccXmE4MK.s:950    .text:0000000000000478 .LBE134

UNDEFINED SYMBOLS
_Z4putcc
_Z11printStringPKc
_Z8printIntiii
_ZN8_Console5flushEv
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPv
_ZN3TCB12createThreadEPFvPvES0_m
_ZN3TCB7runningE
_Z15thread_dispatchv
_ZN3TCB8dispatchEv
_ZN8WaitList3addEP3TCB
_ZN10_Semaphore5closeEv
_ZN10_Semaphore4waitEv
_ZN10_Semaphore6signalEv
_ZN10_Semaphore7tryWaitEv
_ZN10_Semaphore9timedwaitEm
_ZN8_Console4GETCEv
_ZN8_Console4PUTCEc
_ZN8_Console11putcHandlerEv
_ZN8_Console15console_handlerEv
_ZN8WaitList4wakeEv
_ZN3TCB16timeSliceCounterE
